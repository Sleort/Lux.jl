       55 ```@meta
        2 EditURL = "../../../../examples/SimpleRNN/main.jl"
        4 ```
        - 
        1 # Training a Simple LSTM
       52 
      451 In this tutorial we will go over using a recurrent neural network to classify clockwise
      852 and anticlockwise spirals. By the end of this tutorial you will be able to:
      401 
        - 1. Create custom Lux models.
       52 2. Become familiar with the Lux recurrent neural network API.
     9901 3. Training using Optimisers.jl and Zygote.jl.
    20002 
    28225 ## Package Imports
        1 
      501 ````julia
       50 using Lux, LuxAMDGPU, LuxCUDA, JLD2, MLUtils, Optimisers, Zygote, Random, Statistics
      401 ````
      575 
       25 ## Dataset
      175 
      175 We will use MLUtils to generate 500 (noisy) clockwise and 500 (noisy) anticlockwise
      175 spirals. Using this data we will create a `MLUtils.DataLoader`. Our dataloader will give
      175 us sequences of size 2 × seq_len × batch_size and we need to predict a binary value
      175 whether the sequence is clockwise or anticlockwise.
        - 
      175 ````julia
      175 function get_dataloaders(; dataset_size=1000, sequence_length=50)
        -     # Create the spirals
        -     data = [MLUtils.Datasets.make_spiral(sequence_length) for _ in 1:dataset_size]
       25     # Get the labels
       25     labels = vcat(repeat([0.0f0], dataset_size ÷ 2), repeat([1.0f0], dataset_size ÷ 2))
       50     clockwise_spirals = [reshape(d[1][:, 1:sequence_length], :, sequence_length, 1)
       50                          for d in data[1:(dataset_size ÷ 2)]]
       50     anticlockwise_spirals = [reshape(
       50                                  d[1][:, (sequence_length + 1):end], :, sequence_length, 1)
      100                              for d in data[((dataset_size ÷ 2) + 1):end]]
       50     x_data = Float32.(cat(clockwise_spirals..., anticlockwise_spirals...; dims=3))
       49     # Split the dataset
        -     (x_train, y_train), (x_val, y_val) = splitobs((x_data, labels); at=0.8, shuffle=true)
        1     # Create DataLoaders
        -     return (
        -         # Use DataLoader to automatically minibatch and shuffle the data
        -         DataLoader(collect.((x_train, y_train)); batchsize=128, shuffle=true),
        -         # Don't shuffle the validation data
        -         DataLoader(collect.((x_val, y_val)); batchsize=128, shuffle=false))
        - end
        - ````
        - 
        - ````
        - get_dataloaders (generic function with 1 method)
        - ````
        - 
        - ## Creating a Classifier
        - 
        - We will be extending the `Lux.AbstractExplicitContainerLayer` type for our custom model
        - since it will contain a lstm block and a classifier head.
        - 
        - We pass the fieldnames `lstm_cell` and `classifier` to the type to ensure that the
        - parameters and states are automatically populated and we don't have to define
        - `Lux.initialparameters` and `Lux.initialstates`.
        - 
        - To understand more about container layers, please look at
        - [Container Layer](@ref Container-Layer).
        - 
        - ````julia
        - struct SpiralClassifier{L, C} <:
        -        Lux.AbstractExplicitContainerLayer{(:lstm_cell, :classifier)}
        -     lstm_cell::L
        -     classifier::C
        - end
        - ````
        - 
        - We won't define the model from scratch but rather use the [`Lux.LSTMCell`](@ref) and
        - [`Lux.Dense`](@ref).
        - 
        - ````julia
        - function SpiralClassifier(in_dims, hidden_dims, out_dims)
        -     return SpiralClassifier(
        -         LSTMCell(in_dims => hidden_dims), Dense(hidden_dims => out_dims, sigmoid))
        - end
        - ````
        - 
        - ````
        - Main.var"##225".SpiralClassifier
        - ````
        - 
        - We can use default Lux blocks -- `Recurrence(LSTMCell(in_dims => hidden_dims)` -- instead
        - of defining the following. But let's still do it for the sake of it.
        - 
        - Now we need to define the behavior of the Classifier when it is invoked.
        - 
        - ````julia
        - function (s::SpiralClassifier)(
        -         x::AbstractArray{T, 3}, ps::NamedTuple, st::NamedTuple) where {T}
        -     # First we will have to run the sequence through the LSTM Cell
        -     # The first call to LSTM Cell will create the initial hidden state
        -     # See that the parameters and states are automatically populated into a field called
        -     # `lstm_cell` We use `eachslice` to get the elements in the sequence without copying,
        -     # and `Iterators.peel` to split out the first element for LSTM initialization.
        -     x_init, x_rest = Iterators.peel(Lux._eachslice(x, Val(2)))
        -     (y, carry), st_lstm = s.lstm_cell(x_init, ps.lstm_cell, st.lstm_cell)
        -     # Now that we have the hidden state and memory in `carry` we will pass the input and
        -     # `carry` jointly
        -     for x in x_rest
        -         (y, carry), st_lstm = s.lstm_cell((x, carry), ps.lstm_cell, st_lstm)
        -     end
        -     # After running through the sequence we will pass the output through the classifier
        -     y, st_classifier = s.classifier(y, ps.classifier, st.classifier)
        -     # Finally remember to create the updated state
        -     st = merge(st, (classifier=st_classifier, lstm_cell=st_lstm))
        -     return vec(y), st
        - end
        - ````
        - 
        - ## Defining Accuracy, Loss and Optimiser
        - 
        - Now let's define the binarycrossentropy loss. Typically it is recommended to use
        - `logitbinarycrossentropy` since it is more numerically stable, but for the sake of
        - simplicity we will use `binarycrossentropy`.
        - 
        - ````julia
        - function xlogy(x, y)
        -     result = x * log(y)
        -     return ifelse(iszero(x), zero(result), result)
        - end
        - 
        - function binarycrossentropy(y_pred, y_true)
        -     y_pred = y_pred .+ eps(eltype(y_pred))
        -     return mean(@. -xlogy(y_true, y_pred) - xlogy(1 - y_true, 1 - y_pred))
        - end
        - 
        - function compute_loss(x, y, model, ps, st)
        -     y_pred, st = model(x, ps, st)
        -     return binarycrossentropy(y_pred, y), y_pred, st
        - end
        - 
        - matches(y_pred, y_true) = sum((y_pred .> 0.5f0) .== y_true)
        - accuracy(y_pred, y_true) = matches(y_pred, y_true) / length(y_pred)
        - ````
        - 
        - ````
        - accuracy (generic function with 1 method)
        - ````
        - 
        - Finally lets create an optimiser given the model parameters.
        - 
        - ````julia
        - function create_optimiser(ps)
        -     opt = Optimisers.Adam(0.01f0)
        -     return Optimisers.setup(opt, ps)
        - end
        - ````
        - 
        - ````
        - create_optimiser (generic function with 1 method)
        - ````
        - 
        - ## Training the Model
        - 
        - ````julia
        - function main()
        -     # Get the dataloaders
        -     (train_loader, val_loader) = get_dataloaders()
        - 
        -     # Create the model
        -     model = SpiralClassifier(2, 8, 1)
        -     rng = Random.default_rng()
        -     Random.seed!(rng, 0)
        -     ps, st = Lux.setup(rng, model)
        - 
        -     dev = gpu_device()
        -     ps = ps |> dev
        -     st = st |> dev
        - 
        -     # Create the optimiser
        -     opt_state = create_optimiser(ps)
        - 
        -     for epoch in 1:25
        -         # Train the model
        -         for (x, y) in train_loader
        -             x = x |> dev
        -             y = y |> dev
        -             (loss, y_pred, st), back = pullback(compute_loss, x, y, model, ps, st)
        -             gs = back((one(loss), nothing, nothing))[4]
        -             opt_state, ps = Optimisers.update(opt_state, ps, gs)
        - 
        -             println("Epoch [$epoch]: Loss $loss")
        -         end
        - 
        -         # Validate the model
        -         st_ = Lux.testmode(st)
        -         for (x, y) in val_loader
        -             x = x |> dev
        -             y = y |> dev
        -             (loss, y_pred, st_) = compute_loss(x, y, model, ps, st_)
        -             acc = accuracy(y_pred, y)
        -             println("Validation: Loss $loss Accuracy $acc")
        -         end
        -     end
        - 
        -     return (ps, st) |> cpu_device()
        - end
        - 
        - ps_trained, st_trained = main()
        - ````
        - 
        - ````
        - ┌ Warning: `replicate` doesn't work for `TaskLocalRNG`. Returning the same `TaskLocalRNG`.
        - └ @ Lux /var/lib/buildkite-agent/builds/gpuci-6/julialang/lux-dot-jl/src/utils.jl:9
        - Epoch [1]: Loss 0.5638481
        - Epoch [1]: Loss 0.50967574
        - Epoch [1]: Loss 0.47362334
        - Epoch [1]: Loss 0.43843573
        - Epoch [1]: Loss 0.42644197
        - Epoch [1]: Loss 0.40617824
        - Epoch [1]: Loss 0.3987355
        - Validation: Loss 0.3666582 Accuracy 1.0
        - Validation: Loss 0.37252295 Accuracy 1.0
        - Epoch [2]: Loss 0.3665543
        - Epoch [2]: Loss 0.34813106
        - Epoch [2]: Loss 0.33151492
        - Epoch [2]: Loss 0.31969714
        - Epoch [2]: Loss 0.3000667
        - Epoch [2]: Loss 0.28457922
        - Epoch [2]: Loss 0.27440697
        - Validation: Loss 0.2567271 Accuracy 1.0
        - Validation: Loss 0.25964606 Accuracy 1.0
        - Epoch [3]: Loss 0.258437
        - Epoch [3]: Loss 0.24327812
        - Epoch [3]: Loss 0.23043083
        - Epoch [3]: Loss 0.21545929
        - Epoch [3]: Loss 0.20912375
        - Epoch [3]: Loss 0.20077991
        - Epoch [3]: Loss 0.19272795
        - Validation: Loss 0.17884143 Accuracy 1.0
        - Validation: Loss 0.18001854 Accuracy 1.0
        - Epoch [4]: Loss 0.17877227
        - Epoch [4]: Loss 0.17029572
        - Epoch [4]: Loss 0.1615381
        - Epoch [4]: Loss 0.15388839
        - Epoch [4]: Loss 0.14714934
        - Epoch [4]: Loss 0.14029689
        - Epoch [4]: Loss 0.13444757
        - Validation: Loss 0.1272373 Accuracy 1.0
        - Validation: Loss 0.12787294 Accuracy 1.0
        - Epoch [5]: Loss 0.12614565
        - Epoch [5]: Loss 0.12118819
        - Epoch [5]: Loss 0.11558806
        - Epoch [5]: Loss 0.111897744
        - Epoch [5]: Loss 0.1056072
        - Epoch [5]: Loss 0.10131841
        - Epoch [5]: Loss 0.09838437
        - Validation: Loss 0.09222499 Accuracy 1.0
        - Validation: Loss 0.0929487 Accuracy 1.0
        - Epoch [6]: Loss 0.09152035
        - Epoch [6]: Loss 0.08834795
        - Epoch [6]: Loss 0.08464252
        - Epoch [6]: Loss 0.08145859
        - Epoch [6]: Loss 0.07720274
        - Epoch [6]: Loss 0.07409246
        - Epoch [6]: Loss 0.07080375
        - Validation: Loss 0.06785459 Accuracy 1.0
        - Validation: Loss 0.0687156 Accuracy 1.0
        - Epoch [7]: Loss 0.06790842
        - Epoch [7]: Loss 0.06597046
        - Epoch [7]: Loss 0.061631653
        - Epoch [7]: Loss 0.060239404
        - Epoch [7]: Loss 0.056029968
        - Epoch [7]: Loss 0.055339977
        - Epoch [7]: Loss 0.05435717
        - Validation: Loss 0.05052066 Accuracy 1.0
        - Validation: Loss 0.05144254 Accuracy 1.0
        - Epoch [8]: Loss 0.049085826
        - Epoch [8]: Loss 0.04827003
        - Epoch [8]: Loss 0.047092643
        - Epoch [8]: Loss 0.044131763
        - Epoch [8]: Loss 0.045077868
        - Epoch [8]: Loss 0.0403833
        - Epoch [8]: Loss 0.04179044
        - Validation: Loss 0.037961796 Accuracy 1.0
        - Validation: Loss 0.0388905 Accuracy 1.0
        - Epoch [9]: Loss 0.039298292
        - Epoch [9]: Loss 0.036798954
        - Epoch [9]: Loss 0.03425876
        - Epoch [9]: Loss 0.03300444
        - Epoch [9]: Loss 0.03287766
        - Epoch [9]: Loss 0.03087966
        - Epoch [9]: Loss 0.031233594
        - Validation: Loss 0.028976133 Accuracy 1.0
        - Validation: Loss 0.029854378 Accuracy 1.0
        - Epoch [10]: Loss 0.029083263
        - Epoch [10]: Loss 0.028232764
        - Epoch [10]: Loss 0.02556212
        - Epoch [10]: Loss 0.025998091
        - Epoch [10]: Loss 0.02555668
        - Epoch [10]: Loss 0.025056338
        - Epoch [10]: Loss 0.024757165
        - Validation: Loss 0.022789648 Accuracy 1.0
        - Validation: Loss 0.023587892 Accuracy 1.0
        - Epoch [11]: Loss 0.023265747
        - Epoch [11]: Loss 0.022495978
        - Epoch [11]: Loss 0.020488832
        - Epoch [11]: Loss 0.020346055
        - Epoch [11]: Loss 0.020652583
        - Epoch [11]: Loss 0.020653963
        - Epoch [11]: Loss 0.01674641
        - Validation: Loss 0.018557139 Accuracy 1.0
        - Validation: Loss 0.019266682 Accuracy 1.0
        - Epoch [12]: Loss 0.019680686
        - Epoch [12]: Loss 0.018156566
        - Epoch [12]: Loss 0.018613312
        - Epoch [12]: Loss 0.016143553
        - Epoch [12]: Loss 0.015727788
        - Epoch [12]: Loss 0.016976396
        - Epoch [12]: Loss 0.014778864
        - Validation: Loss 0.015609512 Accuracy 1.0
        - Validation: Loss 0.01622323 Accuracy 1.0
        - Epoch [13]: Loss 0.015207646
        - Epoch [13]: Loss 0.014932082
        - Epoch [13]: Loss 0.014522953
        - Epoch [13]: Loss 0.01451707
        - Epoch [13]: Loss 0.015578583
        - Epoch [13]: Loss 0.014264365
        - Epoch [13]: Loss 0.014251677
        - Validation: Loss 0.013499036 Accuracy 1.0
        - Validation: Loss 0.014046825 Accuracy 1.0
        - Epoch [14]: Loss 0.013427534
        - Epoch [14]: Loss 0.013401706
        - Epoch [14]: Loss 0.012190987
        - Epoch [14]: Loss 0.013194013
        - Epoch [14]: Loss 0.013579778
        - Epoch [14]: Loss 0.011919758
        - Epoch [14]: Loss 0.012193594
        - Validation: Loss 0.01190895 Accuracy 1.0
        - Validation: Loss 0.012400618 Accuracy 1.0
        - Epoch [15]: Loss 0.011700295
        - Epoch [15]: Loss 0.011740893
        - Epoch [15]: Loss 0.0120791085
        - Epoch [15]: Loss 0.010942646
        - Epoch [15]: Loss 0.011787452
        - Epoch [15]: Loss 0.011093082
        - Epoch [15]: Loss 0.0093641
        - Validation: Loss 0.010665616 Accuracy 1.0
        - Validation: Loss 0.011104359 Accuracy 1.0
        - Epoch [16]: Loss 0.010568304
        - Epoch [16]: Loss 0.010504848
        - Epoch [16]: Loss 0.009789519
        - Epoch [16]: Loss 0.010402175
        - Epoch [16]: Loss 0.01007713
        - Epoch [16]: Loss 0.010231345
        - Epoch [16]: Loss 0.011559751
        - Validation: Loss 0.009660482 Accuracy 1.0
        - Validation: Loss 0.010066729 Accuracy 1.0
        - Epoch [17]: Loss 0.009636774
        - Epoch [17]: Loss 0.009577
        - Epoch [17]: Loss 0.009219011
        - Epoch [17]: Loss 0.009640854
        - Epoch [17]: Loss 0.009216683
        - Epoch [17]: Loss 0.008985765
        - Epoch [17]: Loss 0.009238282
        - Validation: Loss 0.00881714 Accuracy 1.0
        - Validation: Loss 0.009185887 Accuracy 1.0
        - Epoch [18]: Loss 0.0092737535
        - Epoch [18]: Loss 0.009447327
        - Epoch [18]: Loss 0.009334397
        - Epoch [18]: Loss 0.007569688
        - Epoch [18]: Loss 0.008387575
        - Epoch [18]: Loss 0.007823957
        - Epoch [18]: Loss 0.0073169414
        - Validation: Loss 0.008098308 Accuracy 1.0
        - Validation: Loss 0.008440668 Accuracy 1.0
        - Epoch [19]: Loss 0.008048596
        - Epoch [19]: Loss 0.007426068
        - Epoch [19]: Loss 0.008348774
        - Epoch [19]: Loss 0.008098982
        - Epoch [19]: Loss 0.007261006
        - Epoch [19]: Loss 0.008329249
        - Epoch [19]: Loss 0.007391603
        - Validation: Loss 0.007488264 Accuracy 1.0
        - Validation: Loss 0.0078071333 Accuracy 1.0
        - Epoch [20]: Loss 0.0074420706
        - Epoch [20]: Loss 0.0072216596
        - Epoch [20]: Loss 0.007589395
        - Epoch [20]: Loss 0.0073207314
        - Epoch [20]: Loss 0.0071372446
        - Epoch [20]: Loss 0.0071558515
        - Epoch [20]: Loss 0.0074768392
        - Validation: Loss 0.00695501 Accuracy 1.0
        - Validation: Loss 0.00725347 Accuracy 1.0
        - Epoch [21]: Loss 0.006953022
        - Epoch [21]: Loss 0.0068942
        - Epoch [21]: Loss 0.006561372
        - Epoch [21]: Loss 0.007208174
        - Epoch [21]: Loss 0.006701246
        - Epoch [21]: Loss 0.006621694
        - Epoch [21]: Loss 0.0063977027
        - Validation: Loss 0.006483811 Accuracy 1.0
        - Validation: Loss 0.0067635607 Accuracy 1.0
        - Epoch [22]: Loss 0.0065293233
        - Epoch [22]: Loss 0.0061419513
        - Epoch [22]: Loss 0.0065602404
        - Epoch [22]: Loss 0.006294829
        - Epoch [22]: Loss 0.006578304
        - Epoch [22]: Loss 0.006265085
        - Epoch [22]: Loss 0.0053873844
        - Validation: Loss 0.006066943 Accuracy 1.0
        - Validation: Loss 0.006330615 Accuracy 1.0
        - Epoch [23]: Loss 0.005851608
        - Epoch [23]: Loss 0.006140624
        - Epoch [23]: Loss 0.0061824843
        - Epoch [23]: Loss 0.0059059206
        - Epoch [23]: Loss 0.006037267
        - Epoch [23]: Loss 0.0056926524
        - Epoch [23]: Loss 0.005612853
        - Validation: Loss 0.00569615 Accuracy 1.0
        - Validation: Loss 0.005944694 Accuracy 1.0
        - Epoch [24]: Loss 0.005999727
        - Epoch [24]: Loss 0.0057449653
        - Epoch [24]: Loss 0.005350668
        - Epoch [24]: Loss 0.0055395537
        - Epoch [24]: Loss 0.0054535177
        - Epoch [24]: Loss 0.005574298
        - Epoch [24]: Loss 0.00526309
        - Validation: Loss 0.005362169 Accuracy 1.0
        - Validation: Loss 0.005597187 Accuracy 1.0
        - Epoch [25]: Loss 0.005490442
        - Epoch [25]: Loss 0.0053116097
        - Epoch [25]: Loss 0.00499688
        - Epoch [25]: Loss 0.005161237
        - Epoch [25]: Loss 0.005218547
        - Epoch [25]: Loss 0.0053315423
        - Epoch [25]: Loss 0.0057608653
        - Validation: Loss 0.005060818 Accuracy 1.0
        - Validation: Loss 0.005283313 Accuracy 1.0
        - 
        - ````
        - 
        - ## Saving the Model
        - 
        - We can save the model using JLD2 (and any other serialization library of your choice)
        - Note that we transfer the model to CPU before saving. Additionally, we recommend that
        - you don't save the model
        - 
        - ````julia
        - @save "trained_model.jld2" {compress = true} ps_trained st_trained
        - ````
        - 
        - Let's try loading the model
        - 
        - ````julia
        - @load "trained_model.jld2" ps_trained st_trained
        - ````
        - 
        - ````
        - 2-element Vector{Symbol}:
        -  :ps_trained
        -  :st_trained
        - ````
        - 
        - ## Appendix
        - 
        - ````julia
        - using InteractiveUtils
        - InteractiveUtils.versioninfo()
        - if @isdefined(LuxCUDA) && CUDA.functional(); println(); CUDA.versioninfo(); end
        - if @isdefined(LuxAMDGPU) && LuxAMDGPU.functional(); println(); AMDGPU.versioninfo(); end
        - ````
        - 
        - ````
        - Julia Version 1.10.1
        - Commit 7790d6f0641 (2024-02-13 20:41 UTC)
        - Build Info:
        -   Official https://julialang.org/ release
        - Platform Info:
        -   OS: Linux (x86_64-linux-gnu)
        -   CPU: 48 × AMD EPYC 7402 24-Core Processor
        -   WORD_SIZE: 64
        -   LIBM: libopenlibm
        -   LLVM: libLLVM-15.0.7 (ORCJIT, znver2)
        - Threads: 48 default, 0 interactive, 24 GC (on 2 virtual cores)
        - Environment:
        -   LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64
        -   JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6
        -   JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-6/julialang/lux-dot-jl/docs/Project.toml
        -   JULIA_AMDGPU_LOGGING_ENABLED = true
        -   JULIA_DEBUG = Literate
        -   JULIA_CPU_THREADS = 2
        -   JULIA_NUM_THREADS = 48
        -   JULIA_LOAD_PATH = @:@v#.#:@stdlib
        -   JULIA_CUDA_HARD_MEMORY_LIMIT = 25%
        - 
        - CUDA runtime 12.3, artifact installation
        - CUDA driver 12.3
        - NVIDIA driver 545.23.8
        - 
        - CUDA libraries: 
        - - CUBLAS: 12.3.4
        - - CURAND: 10.3.4
        - - CUFFT: 11.0.12
        - - CUSOLVER: 11.5.4
        - - CUSPARSE: 12.2.0
        - - CUPTI: 21.0.0
        - - NVML: 12.0.0+545.23.8
        - 
        - Julia packages: 
        - - CUDA: 5.2.0
        - - CUDA_Driver_jll: 0.7.0+1
        - - CUDA_Runtime_jll: 0.11.1+0
        - 
        - Toolchain:
        - - Julia: 1.10.1
        - - LLVM: 15.0.7
        - 
        - Environment:
        - - JULIA_CUDA_HARD_MEMORY_LIMIT: 25%
        - 
        - 1 device:
        -   0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 4.266 GiB / 4.750 GiB available)
        - ┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.
        - └ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19
        - 
        - ````
        - 
        - ---
        - 
        - *This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*
        - 
