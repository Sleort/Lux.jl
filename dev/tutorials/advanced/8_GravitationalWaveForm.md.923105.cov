   170916 ```@meta
   358994 EditURL = "../../../../examples/GravitationalWaveForm/main.jl"
   599443 ```
     2858 
     3315 # Training a Neural ODE to Model Gravitational Waveforms
      589 
   533296 This code is adapted from [Astroinformatics/ScientificMachineLearning](https://github.com/Astroinformatics/ScientificMachineLearning/blob/c93aac3a460d70b4cce98836b677fd9b732e94b7/neuralode_gw.ipynb)
     5330 
   265313 The code has been minimally adapted from
   435927 [Keith et. al. 2021](https://arxiv.org/abs/2102.12695) which originally used Flux.jl
      158 
   265384 ## Package Imports
   265313 
        2 ````julia
   265268 using Lux, ComponentArrays, LineSearches, LuxAMDGPU, LuxCUDA, OrdinaryDiffEq, Optimization,
        1       OptimizationOptimJL, Random, SciMLSensitivity
      117 using CairoMakie, MakiePublication
      461 
      172 CUDA.allowscalar(false)
        3 ````
      269 
      314 ## Define some Utility Functions
      258 
      259 ::: tip
        - 
        - This section can be skipped. It defines functions to simulate the model, however, from a
      112 scientific machine learning perspective, isn't super relevant.
      172 
       86 :::
       86 
       86 We need a very crude 2-body path. Assume the 1-body motion is a newtonian 2-body position
        - vector $r = r_1 - r_2$ and use Newtonian formulas to get $r_1$, $r_2$ (e.g. Theoretical
        - Mechanics of Particles and Continua 4.3)
       56 
      116 ````julia
        - function one2two(path, m₁, m₂)
       86     M = m₁ + m₂
       86     r₁ = m₂ / M .* path
        -     r₂ = -m₁ / M .* path
       86     return r₁, r₂
       86 end
        - ````
        - 
        - ````
        - one2two (generic function with 1 method)
        - ````
        - 
        - Next we define a function to perform the change of variables:
        - $$(\chi(t),\phi(t)) \mapsto (x(t),y(t))$$
        - 
        - ````julia
        - @views function soln2orbit(soln, model_params=nothing)
        -     @assert size(soln, 1) ∈ [2, 4] "size(soln,1) must be either 2 or 4"
        - 
        -     if size(soln, 1) == 2
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        - 
        -         @assert length(model_params)==3 "model_params must have length 3 when size(soln,2) = 2"
        -         p, M, e = model_params
        -     else
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        -         p = soln[3, :]
        -         e = soln[4, :]
        -     end
       56 
       71     r = p ./ (1 .+ e .* cos.(χ))
       71     x = r .* cos.(ϕ)
        -     y = r .* sin.(ϕ)
      101 
       86     orbit = vcat(x', y')
        0     return orbit
        0 end
        - ````
        0 
        0 ````
        - soln2orbit (generic function with 2 methods)
      101 ````
        - 
       56 This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d_dt(v::AbstractVector, dt)
        -     a = -3 / 2 * v[1] + 2 * v[2] - 1 / 2 * v[3]
        -     b = (v[3:end] .- v[1:(end - 2)]) / 2
        -     c = 3 / 2 * v[end] - 2 * v[end - 1] + 1 / 2 * v[end - 2]
        -     return [a; b; c] / dt
        - end
        - ````
        - 
        - ````
        - d_dt (generic function with 1 method)
        - ````
        - 
        - This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d2_dt2(v::AbstractVector, dt)
        -     a = 2 * v[1] - 5 * v[2] + 4 * v[3] - v[4]
        -     b = v[1:(end - 2)] .- 2 * v[2:(end - 1)] .+ v[3:end]
        -     c = 2 * v[end] - 5 * v[end - 1] + 4 * v[end - 2] - v[end - 3]
        -     return [a; b; c] / (dt^2)
        - end
        - ````
        - 
        - ````
        - d2_dt2 (generic function with 1 method)
        - ````
        - 
        - Now we define a function to compute the trace-free moment tensor from the orbit
        - 
        - ````julia
        - function orbit2tensor(orbit, component, mass=1)
        -     x = orbit[1, :]
        -     y = orbit[2, :]
        - 
        -     Ixx = x .^ 2
        -     Iyy = y .^ 2
        -     Ixy = x .* y
        -     trace = Ixx .+ Iyy
        - 
        -     if component[1] == 1 && component[2] == 1
        -         tmp = Ixx .- trace ./ 3
        -     elseif component[1] == 2 && component[2] == 2
        -         tmp = Iyy .- trace ./ 3
        -     else
        -         tmp = Ixy
        -     end
        - 
        -     return mass .* tmp
        - end
        - 
        - function h_22_quadrupole_components(dt, orbit, component, mass=1)
        -     mtensor = orbit2tensor(orbit, component, mass)
        -     mtensor_ddot = d2_dt2(mtensor, dt)
        -     return 2 * mtensor_ddot
        - end
        - 
        - function h_22_quadrupole(dt, orbit, mass=1)
        -     h11 = h_22_quadrupole_components(dt, orbit, (1, 1), mass)
        -     h22 = h_22_quadrupole_components(dt, orbit, (2, 2), mass)
        -     h12 = h_22_quadrupole_components(dt, orbit, (1, 2), mass)
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_one_body(dt::T, orbit) where {T}
        -     h11, h12, h22 = h_22_quadrupole(dt, orbit)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     h11_1, h12_1, h22_1 = h_22_quadrupole(dt, orbit1, mass1)
        -     h11_2, h12_2, h22_2 = h_22_quadrupole(dt, orbit2, mass2)
        -     h11 = h11_1 + h11_2
        -     h12 = h12_1 + h12_2
        -     h22 = h22_1 + h22_2
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_two_body(dt::T, orbit1, mass1, orbit2, mass2) where {T}
        -     # compute (2,2) mode strain from orbits of BH 1 of mass1 and BH2 of mass 2
        - 
        -     @assert abs(mass1 + mass2 - 1.0)<1e-12 "Masses do not sum to unity"
        - 
        -     h11, h12, h22 = h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function compute_waveform(dt::T, soln, mass_ratio, model_params=nothing) where {T}
        -     @assert mass_ratio≤1 "mass_ratio must be <= 1"
        -     @assert mass_ratio≥0 "mass_ratio must be non-negative"
        - 
        -     orbit = soln2orbit(soln, model_params)
        -     if mass_ratio > 0
        -         m₂ = inv(T(1) + mass_ratio)
        -         m₁ = mass_ratio * m₂
        - 
        -         orbit₁, orbit₂ = one2two(orbit, m₁, m₂)
        -         waveform = h_22_strain_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     else
        -         waveform = h_22_strain_one_body(dt, orbit)
        -     end
        -     return waveform
        - end
        - ````
        - 
        - ````
        - compute_waveform (generic function with 2 methods)
        - ````
        - 
        - ## Simulating the True Model
        - 
        - `RelativisticOrbitModel` defines system of odes which describes motion of point like
        - particle in schwarzschild background, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function RelativisticOrbitModel(u, (p, M, e), t)
        -     χ, ϕ = u
        - 
        -     numer = (p - 2 - 2 * e * cos(χ)) * (1 + e * cos(χ))^2
        -     denom = sqrt((p - 2)^2 - 4 * e^2)
        - 
        -     χ̇ = numer * sqrt(p - 6 - 2 * e * cos(χ)) / (M * (p^2) * denom)
        -     ϕ̇ = numer / (M * (p^(3 / 2)) * denom)
        - 
        -     return [χ̇, ϕ̇]
        - end
        - 
        - mass_ratio = 0.0         # test particle
        - u0 = Float64[π, 0.0]     # initial conditions
        - datasize = 250
        - tspan = (0.0f0, 6.0f4)   # timespace for GW waveform
        - tsteps = range(tspan[1], tspan[2]; length=datasize)  # time at each timestep
        - dt_data = tsteps[2] - tsteps[1]
        - dt = 100.0
        - const ode_model_params = [100.0, 1.0, 0.5]; # p, M, e
        - ````
        - 
        - Let's simulate the true model and plot the results using `OrdinaryDiffEq.jl`
        - 
        - ````julia
        - prob = ODEProblem(RelativisticOrbitModel, u0, tspan, ode_model_params)
        - soln = Array(solve(prob, RK4(); saveat=tsteps, dt, adaptive=false))
        - waveform = first(compute_waveform(dt_data, soln, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l, s]], ["Waveform Data"])
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZwcdZ0//ndV9T3Tc9+T+yIHBMKVhDuXEYjy9UdUBEUBV7werorIesBXd/Wnq7DLggEB0UVFQXGBlSNcEgghF4QchJDJJJnMfR99d9f1/aNmaj5V1d2Zs6e65/V87GMfPd011RXKnq53vd+f95tTVZUAAAAAAABg+uGn+gAAAAAAAABgaiAgBAAAAAAAmKYQEAIAAAAAAExTCAgBAAAAAACmKQSEAAAAAAAA0xQCQgAAAAAAgGkKASEAAAAAAMA0hYAQAAAAAABgmkJACAAAAAAAME0hIAQAAAAAAJimEBACAAAAAABMUwgIAQAAAAAApikEhAAAAAAAANMUAkIAAAAAAIBpCgEhAAAAAADANIWAEAAAAAAAYJpCQAgAAAAAADBNISAEAAAAAACYphAQAgAAAAAATFMICAEAAAAAAKYpBIQAAAAAAADTFAJCAAAAAACAaQoBIQAAAAAAwDSFgBAAAAAAAGCaQkAIAAAAAAAwTSEgBAAAAAAAmKYQEAIAAAAAAExTCAgBAAAAAACmKQSEAAAAAAAA0xQCQgAAAAAAgGnKMdUHABOG47ipPgQAAAAAAJhgqqpO3s6RIQQAAAAAAJimkCHMNZN6/wAAAAAAADImAzWAyBACAAAAAABMUwgIAQAAAAAApikEhAAAAAAAANMUAkIAAAAAAIBpCgEhAAAAAADANIWAEAAAAAAAYJpCQAgAAAAAADBNISAEAAAAAACYpjCYPtfk5+frj0Oh0BQeCQAAAAAA2BynqupUHwNMDI7jTM/g5AIAAAAAZC/tCn9Sr+qRIcw1wWBwqg8BAAAAAACyAzKEuSMD9w8AAAAAACBjMn
        - ```
        - 
        - ## Defiing a Neural Network Model
        - 
        - Next, we define the neural network model that takes 1 input (time) and has two outputs.
        - We'll make a function `ODE_model` that takes the initial conditions, neural network
        - parameters and a time as inputs and returns the derivatives.
        - 
        - It is typically never recommended to use globals but incase you do use them, make sure
        - to mark them as `const`.
        - 
        - We will deviate from the standard Neural Network initialization and use
        - `WeightInitializers.jl`,
        - 
        - ````julia
        - const nn = Chain(Base.Fix1(broadcast, cos),
        -     Dense(1 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 2; init_weight=truncated_normal(; std=1e-4)))
        - ps, st = Lux.setup(MersenneTwister(), nn)
        - ````
        - 
        - ````
        - ((layer_1 = NamedTuple(), layer_2 = (weight = Float32[-5.3509534f-6; 0.00011317778; 0.00010403368; -5.130149f-5; 0.00013369582; 0.0001216688; -8.18042f-5; -5.5652046f-5; -0.0001279265; 0.00023662929; 9.811723f-5; 0.00014030942; 6.374238f-6; -1.6787779f-5; -8.3301304f-5; 7.756497f-5; 3.7919173f-5; 0.00026268614; -7.1618335f-5; -6.454259f-5; -8.3417784f-5; 0.00012145785; 1.0859747f-5; 3.8331258f-5; 8.3806706f-5; 1.7489736f-5; 7.912143f-5; 2.8329701f-5; -0.00013158303; 4.0245515f-5; -2.0075193f-5; -2.7128894f-5;;], bias = Float32[0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = Float32[-0.00021944841 -0.00011936309 8.40113f-5 4.10228f-5 -4.1563268f-5 7.746388f-5 -7.2593546f-5 4.759427f-5 0.00011368302 0.000121259785 -0.00019873439 -8.593599f-5 0.00017024046 -1.0955547f-5 0.00021371932 6.036527f-6 1.0864196f-5 -0.00010377929 4.0040624f-5 2.6572836f-5 6.9221176f-5 -4.9867513f-6 -8
        - ````
        - 
        - Similar to most DL frameworks, Lux defaults to using `Float32`, however, in this case we
        - need Float64
        - 
        - ````julia
        - const params = ComponentArray{Float64}(ps)
        - ````
        - 
        - ````
        - ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [-5.350953415472759e-6; 0.0001131777826230973; 0.0001040336792357266; -5.1301489293109626e-5; 0.00013369582302402705; 0.00012166880333097652; -8.180420263670385e-5; -5.5652046285104007e-5; -0.00012792649795301259; 0.00023662929015699774; 9.811722702579573e-5; 0.0001403094211127609; 6.3742381826159544e-6; -1.6787778804427944e-5; -8.330130367539823e-5; 7.756496779620647e-5; 3.791917333728634e-5; 0.0002626861387398094; -7.161833491409197e-5; -6.454258982557803e-5; -8.341778448084369e-5; 0.0001214578514918685; 1.0859746907954104e-5; 3.833125811070204e-5; 8.380670624319464e-5; 1.7489735910203308e-5; 7.912143337307498e-5; 2.832970130839385e-5; -0.00013158303045202047; 4.0245515265269205e-5; -2.0075192878721282e-5; -2.712889363465365e-5;;], bias = [0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = [-0.00021944841137155
        - ````
        - 
        - Now we define a system of odes which describes motion of point like particle with
        - Newtonian physics, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function ODE_model(u, nn_params, t)
        -     χ, ϕ = u
        -     p, M, e = ode_model_params
        - 
        -     # In this example we know that `st` is am empty NamedTuple hence we can safely ignore
        -     # it, however, in general, we should use `st` to store the state of the neural network.
        -     y = 1 .+ first(nn([first(u)], nn_params, st))
        - 
        -     numer = (1 + e * cos(χ))^2
        -     denom = M * (p^(3 / 2))
        - 
        -     χ̇ = (numer / denom) * y[1]
        -     ϕ̇ = (numer / denom) * y[2]
        - 
        -     return [χ̇, ϕ̇]
        - end
        - ````
        - 
        - ````
        - ODE_model (generic function with 1 method)
        - ````
        - 
        - Let us now simulate the neural network model and plot the results. We'll use the untrained
        - neural network parameters to simulate the model.
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, params)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=params, saveat=tsteps, dt, adaptive=false))
        - waveform_nn = first(compute_waveform(dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)"]; position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeYwkWXUv/nNvRGTkWltXVXdX9d7TPT09+wwzDMsz8AbMgxnEzz+wfggk24AtJMv/WNaAZNnIsvwT/GlZtmxg0M/Yks2zjbCfMA8/P57fwANmYbZmZnqZ3quruvYl91juvb8/IjPyRmRWd21dFZn1/dhCWZnZmTEdnVn3xDn3HKaUIgAAAAAAANh9+E4fAAAAAAAAAOwMBIQAAAAAAAC7FAJCAAAAAACAXQoBIQAAAAAAwC6FgBAAAAAAAGCXQkAIAAAAAACwSyEgBAAAAAAA2KUQEAIAAAAAAOxSCAgBAAAAAAB2KQSEAAAAAAAAuxQCQgAAAAAAgF0KASEAAAAAAMAuhYAQAAAAAABgl0JACAAAAAAAsEshIAQAAAAAANilEBACAAAAAADsUggIAQAAAAAAdikEhAAAAAAAALsUAkIAAAAAAIBdCgEhAAAAAADALoWAEAAAAAAAYJdCQAgAAAAAALBLISAEAAAAAADYpRAQAgAAAAAA7FIICAEAAAAAAHYpBIQAAAAAAAC7FAJCAAAAAACAXQoBIQAAAAAAwC6FgBAAAAAAAGCXQkAIAAAAAACwS5k7fQCwZRhjO30IAAAAAACwxZRSd+7FkSEEAAAAAADYpZAh7DV39PoBAAAAAABsm22oAUSGEAAAAAAAYJdCQAgAAAAAALBLISAEAAAAAADYpRAQAgAAAAAA7FIICAEAAAAAAHYpBIQAAAAAAAC7FAJCAAAAAACAXQoBIQAAAAAAwC6FwfS95pOf/GR4+5/+6Z928EgAAAAAACDhmFJqp48BtgZjLHYPTi4AAAAAQPcKVvh3dFWPDGGv+cd//MedPgQAAA
        - ```
        - 
        - ## Setting Up for Training the Neural Network
        - 
        - Next, we define the objective (loss) function to be minimized when training the neural
        - differential equations.
        - 
        - ````julia
        - function loss(θ)
        -     pred = Array(solve(prob_nn, RK4(); u0, p=θ, saveat=tsteps, dt, adaptive=false))
        -     pred_waveform = first(compute_waveform(dt_data, pred, mass_ratio, ode_model_params))
        -     loss = sum(abs2, waveform .- pred_waveform)
        -     return loss, pred_waveform
        - end
        - ````
        - 
        - ````
        - loss (generic function with 1 method)
        - ````
        - 
        - Warmup the loss function
        - 
        - ````julia
        - loss(params)
        - ````
        - 
        - ````
        - (0.17983998047770405, [-0.02426843072497624, -0.023483291650803644, -0.022698152576630447, -0.02137152471755831, -0.019475658807594477, -0.016970275296781696, -0.013802490278538344, -0.009903852560513422, -0.005192615487130867, 0.0004266044165521943, 0.007053593681339696, 0.014771523578781151, 0.023599163353318228, 0.03336203750320971, 0.043413036863436526, 0.051971813038352854, 0.05472769755839465, 0.04256534205724737, 0.001925579585094672, -0.06643337120383926, -0.11038617622219406, -0.07619138173838473, -0.00668079042206193, 0.038910697767584775, 0.05430355086339618, 0.05293674059066948, 0.04480689101257868, 0.034779212879301795, 0.02488842192456245, 0.015891796720305246, 0.008003199735747006, 0.0012214314134841166, -0.004534007360444229, -0.009363820722203273, -0.013365839219941151, -0.0166238679570627, -0.01920915026174681, -0.021177326941743, -0.02257061433527936, -0.023418697495638078, -0.023739704198094517, -0.023540555397688408, -0.02281823737775079, -0.02155746912250875, -0.019732808710757048, -0.0
        - ````
        - 
        - Now let us define a callback function to store the loss over time
        - 
        - ````julia
        - const losses = Float64[]
        - 
        - function callback(θ, l, pred_waveform)
        -     push!(losses, l)
        -     println("Training || Iteration: $(length(losses)) || Loss: $(l)")
        -     return false
        - end
        - ````
        - 
        - ````
        - callback (generic function with 1 method)
        - ````
        - 
        - ## Training the Neural Network
        - 
        - Training uses the BFGS optimizers. This seems to give good results because the Newtonian
        - model seems to give a very good initial guess
        - 
        - ````julia
        - adtype = Optimization.AutoZygote()
        - optf = Optimization.OptimizationFunction((x, p) -> loss(x), adtype)
        - optprob = Optimization.OptimizationProblem(optf, params)
        - res = Optimization.solve(
        -     optprob, BFGS(; initial_stepnorm=0.01, linesearch=LineSearches.BackTracking());
        -     callback, maxiters=1000)
        - ````
        - 
        - ````
        - retcode: Success
        - u: ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [-5.350953415465668e-6; 0.0001131777826230331; 0.00010403367923554576; -5.1301489293046633e-5; 0.00013369582302405166; 0.00012166880333092111; -8.180420263655235e-5; -5.565204628511862e-5; -0.0001279264979531432; 0.00023662929015675838; 9.811722702573173e-5; 0.0001403094211126249; 6.374238182617309e-6; -1.6787778804421896e-5; -8.330130367533726e-5; 7.75649677961466e-5; 3.791917333732074e-5; 0.00026268613873971024; -7.161833491396885e-5; -6.454258982552403e-5; -8.341778448076631e-5; 0.000121457851491625; 1.0859746907928043e-5; 3.833125811060429e-5; 8.380670624307549e-5; 1.7489735910192293e-5; 7.912143337298435e-5; 2.8329701308394898e-5; -0.00013158303045194818; 4.0245515265224834e-5; -2.0075192878705063e-5; -2.7128893634626244e-5;;], bias = [-7.83895294736454e-18; 7.066264226917257e-17; 2.0119329625308996e-16; -7.141717826589034e-17; -2.7004258920565448e-17; 5.925185003145165e-17; -1.672529710550147e-16; 1.5959123854938282e-17; 1.43962770146
        - ````
        - 
        - ## Visualizing the Results
        - 
        - Let us now plot the loss over time
        - 
        - ````julia
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Iteration", ylabel="Loss")
        - 
        -     lines!(ax, losses; linewidth=2, alpha=0.75)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzde5RcZZ0v/Kf6fiGddHeS7iRgyE0uESKTEQIoFwmgSUZu6qCeF0e8Ho+uF+UgZ7GW6KhrxTWjoxhZCuIcR0ZGOSuvMGMyMGfUADIhIHKRyC2EjklIdyfdnXSn0/eq948KleoQcul0195V9fn89exdlb1/bYe1/Oa5/BKpVCoAAABQfEqiLgAAAIBoCIQAAABFSiAEAAAoUgIhAABAkRIIAQAAipRACAAAUKQEQgAAgCIlEAIAABQpgRAAAKBICYQAAABFSiAEAAAoUgIhAABAkRIIAQAAipRACAAAUKQEQgAAgCIlEAIAABQpgRAAAKBICYQAAABFSiAEAAAoUgIhAABAkRIIAQAAipRACAAAUKQEQgAAgCIlEAIAABQpgRAAAKBICYQAAABFSiAEAAAoUgIhAABAkRIIAQAAipRACAAAUKTKoi6AN5VIJKIuAQAAiFgqlZq4h5shBAAAKFJmCONuQv89AAAAiK0crBk0QwgAAFCkBEIAAIAiJRACAAAUKYEQAACgSAmEAAAARUogBAAAKFICIQAAQJESCAEAAIqUQAgAAFCkBEIAAIAiJRACAAAUKYEQAACgSAmEAAAARUogBAAAKFICIQAAQJESCAEAAIqUQAgAAFCkBEIAAIAiJRACAAAUKYEQAACgSAmEAAAARUogBAAAKFICIQAAQJESCAEAAIqUQAgAAFCkBEIAAIAiJRACAAAUqbKoC+AIzjzzzMz42WefjbASAACgwCRSqVTUNXBoiUTioDtR/bIGBkfau/a1duzrGxi+4KxZkdQAAADFJp0IJjQFmCGMu2eeeSbaAvoGhr/xjxvSfwnLy0re9fZZbw
        - ```
        - 
        - Finally let us visualize the results
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, res.u)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=res.u, saveat=tsteps, dt, adaptive=false))
        - waveform_nn_trained = first(compute_waveform(
        -     dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l3 = lines!(ax, tsteps, waveform_nn_trained; linewidth=2, alpha=0.75)
        -     s3 = scatter!(
        -         ax, tsteps, waveform_nn_trained; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2], [l3, s3]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)", "Waveform Neural Net"];
        -         position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdWYxk2VU3+rX2PufElPNQmZVZc1W7utruttvdNm1jDMbmA4wtiyt4wVdI4Ad0BS88GCQkzCAk84iQDcKAdC10n+71BS4S+Pu4fBc80G03ntruqaq6qrrmrMzKIeYz7L3uw4lhR2RWd1ZVVsaJyP9PLRRxIjJim1MRsddZa6/NIkIAAAAAAABw8KhBDwAAAAAAAAAGAwEhAAAAAADAAYWAEAAAAAAA4IBCQAgAAAAAAHBAISAEAAAAAAA4oBAQAgAAAAAAHFAICAEAAAAAAA4oBIQAAAAAAAAHFAJCAAAAAACAAwoBIQAAAAAAwAGFgBAAAAAAAOCAQkAIAAAAAABwQCEgBAAAAAAAOKAQEAIAAAAAABxQCAgBAAAAAAAOKASEAAAAAAAABxQCQgAAAAAAgAMKASEAAAAAAMABhYAQAAAAAADggEJACAAAAAAAcEAhIAQAAAAAADigEBACAAAAAAAcUAgIAQAAAAAADigEhAAAAAAAAAcUAkIAAAAAAIADCgEhAAAAAADAAYWAEAAAAAAA4IBCQAgAAAAAAHBAISAEAAAAAAA4oBAQAgAAAAAAHFDeoAcAe4aZBz0EAAAAAADYYyLy6F4cGUIAAAAAAIADChnCUfNIrx8AAAAAAMC+2YcaQGQIAQAAAAAADigEhAAAAAAAAAcUAkIAAAAAAIADCgEhAAAAAADAAYWAEAAAAAAA4IBCQAgAAAAAAHBAISAEAAAAAAA4oBAQAgAAAAAAHFAICAEAAAAAAA4oBIQAAAAAAAAHFAJCAAAAAACAAwoBIQAAAAAAwAGFgBAAAAAAAOCAQkAIAAAAAABwQCEgBAAAAAAAOK
        - ```
        - 
        - ## Appendix
        - 
        - ````julia
        - using InteractiveUtils
        - InteractiveUtils.versioninfo()
        - if @isdefined(LuxCUDA) && CUDA.functional(); println(); CUDA.versioninfo(); end
        - if @isdefined(LuxAMDGPU) && LuxAMDGPU.functional(); println(); AMDGPU.versioninfo(); end
        - ````
        - 
        - ````
        - Julia Version 1.10.2
        - Commit bd47eca2c8a (2024-03-01 10:14 UTC)
        - Build Info:
        -   Official https://julialang.org/ release
        - Platform Info:
        -   OS: Linux (x86_64-linux-gnu)
        -   CPU: 48 × AMD EPYC 7402 24-Core Processor
        -   WORD_SIZE: 64
        -   LIBM: libopenlibm
        -   LLVM: libLLVM-15.0.7 (ORCJIT, znver2)
        - Threads: 48 default, 0 interactive, 24 GC (on 2 virtual cores)
        - Environment:
        -   LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64
        -   JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6
        -   JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-6/julialang/lux-dot-jl/docs/Project.toml
        -   JULIA_AMDGPU_LOGGING_ENABLED = true
        -   JULIA_DEBUG = Literate
        -   JULIA_CPU_THREADS = 2
        -   JULIA_NUM_THREADS = 48
        -   JULIA_LOAD_PATH = @:@v#.#:@stdlib
        -   JULIA_CUDA_HARD_MEMORY_LIMIT = 25%
        - 
        - CUDA runtime 12.3, artifact installation
        - CUDA driver 12.3
        - NVIDIA driver 545.23.8
        - 
        - CUDA libraries: 
        - - CUBLAS: 12.3.4
        - - CURAND: 10.3.4
        - - CUFFT: 11.0.12
        - - CUSOLVER: 11.5.4
        - - CUSPARSE: 12.2.0
        - - CUPTI: 21.0.0
        - - NVML: 12.0.0+545.23.8
        - 
        - Julia packages: 
        - - CUDA: 5.2.0
        - - CUDA_Driver_jll: 0.7.0+1
        - - CUDA_Runtime_jll: 0.11.1+0
        - 
        - Toolchain:
        - - Julia: 1.10.2
        - - LLVM: 15.0.7
        - 
        - Environment:
        - - JULIA_CUDA_HARD_MEMORY_LIMIT: 25%
        - 
        - 1 device:
        -   0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 3.787 GiB / 4.750 GiB available)
        - ┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.
        - └ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19
        - 
        - ````
        - 
        - ---
        - 
        - *This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*
        - 
