    74588 ```@meta
   196690 EditURL = "../../../../examples/GravitationalWaveForm/main.jl"
   372359 ```
     2630 
     2839 # Training a Neural ODE to Model Gravitational Waveforms
      285 
   289156 This code is adapted from [Astroinformatics/ScientificMachineLearning](https://github.com/Astroinformatics/ScientificMachineLearning/blob/c93aac3a460d70b4cce98836b677fd9b732e94b7/neuralode_gw.ipynb)
     5042 
   143321 The code has been minimally adapted from
   217815 [Keith et. al. 2021](https://arxiv.org/abs/2102.12695) which originally used Flux.jl
       74 
   143352 ## Package Imports
   143321 
        2 ````julia
   143288 using Lux, ComponentArrays, LineSearches, LuxAMDGPU, LuxCUDA, OrdinaryDiffEq, Optimization,
        1       OptimizationOptimJL, Random, SciMLSensitivity
       65 using CairoMakie, MakiePublication
      233 
       84 CUDA.allowscalar(false)
        3 ````
      113 
      146 ## Define some Utility Functions
      126 
      127 ::: tip
        - 
        - This section can be skipped. It defines functions to simulate the model, however, from a
       40 scientific machine learning perspective, isn't super relevant.
       84 
       42 :::
       42 
       42 We need a very crude 2-body path. Assume the 1-body motion is a newtonian 2-body position
        - vector $r = r_1 - r_2$ and use Newtonian formulas to get $r_1$, $r_2$ (e.g. Theoretical
        - Mechanics of Particles and Continua 4.3)
       20 
       64 ````julia
        - function one2two(path, m₁, m₂)
       42     M = m₁ + m₂
       42     r₁ = m₂ / M .* path
        -     r₂ = -m₁ / M .* path
       42     return r₁, r₂
       42 end
        - ````
        - 
        - ````
        - one2two (generic function with 1 method)
        - ````
        - 
        - Next we define a function to perform the change of variables:
        - $$(\chi(t),\phi(t)) \mapsto (x(t),y(t))$$
        - 
        - ````julia
        - @views function soln2orbit(soln, model_params=nothing)
        -     @assert size(soln, 1) ∈ [2, 4] "size(soln,1) must be either 2 or 4"
        - 
        -     if size(soln, 1) == 2
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        - 
        -         @assert length(model_params)==3 "model_params must have length 3 when size(soln,2) = 2"
        -         p, M, e = model_params
        -     else
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        -         p = soln[3, :]
        -         e = soln[4, :]
        -     end
       20 
       31     r = p ./ (1 .+ e .* cos.(χ))
       31     x = r .* cos.(ϕ)
        -     y = r .* sin.(ϕ)
       53 
       42     orbit = vcat(x', y')
        0     return orbit
        0 end
        - ````
        0 
        0 ````
        - soln2orbit (generic function with 2 methods)
       53 ````
        - 
       20 This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d_dt(v::AbstractVector, dt)
        -     a = -3 / 2 * v[1] + 2 * v[2] - 1 / 2 * v[3]
        -     b = (v[3:end] .- v[1:(end - 2)]) / 2
        -     c = 3 / 2 * v[end] - 2 * v[end - 1] + 1 / 2 * v[end - 2]
        -     return [a; b; c] / dt
        - end
        - ````
        - 
        - ````
        - d_dt (generic function with 1 method)
        - ````
        - 
        - This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d2_dt2(v::AbstractVector, dt)
        -     a = 2 * v[1] - 5 * v[2] + 4 * v[3] - v[4]
        -     b = v[1:(end - 2)] .- 2 * v[2:(end - 1)] .+ v[3:end]
        -     c = 2 * v[end] - 5 * v[end - 1] + 4 * v[end - 2] - v[end - 3]
        -     return [a; b; c] / (dt^2)
        - end
        - ````
        - 
        - ````
        - d2_dt2 (generic function with 1 method)
        - ````
        - 
        - Now we define a function to compute the trace-free moment tensor from the orbit
        - 
        - ````julia
        - function orbit2tensor(orbit, component, mass=1)
        -     x = orbit[1, :]
        -     y = orbit[2, :]
        - 
        -     Ixx = x .^ 2
        -     Iyy = y .^ 2
        -     Ixy = x .* y
        -     trace = Ixx .+ Iyy
        - 
        -     if component[1] == 1 && component[2] == 1
        -         tmp = Ixx .- trace ./ 3
        -     elseif component[1] == 2 && component[2] == 2
        -         tmp = Iyy .- trace ./ 3
        -     else
        -         tmp = Ixy
        -     end
        - 
        -     return mass .* tmp
        - end
        - 
        - function h_22_quadrupole_components(dt, orbit, component, mass=1)
        -     mtensor = orbit2tensor(orbit, component, mass)
        -     mtensor_ddot = d2_dt2(mtensor, dt)
        -     return 2 * mtensor_ddot
        - end
        - 
        - function h_22_quadrupole(dt, orbit, mass=1)
        -     h11 = h_22_quadrupole_components(dt, orbit, (1, 1), mass)
        -     h22 = h_22_quadrupole_components(dt, orbit, (2, 2), mass)
        -     h12 = h_22_quadrupole_components(dt, orbit, (1, 2), mass)
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_one_body(dt::T, orbit) where {T}
        -     h11, h12, h22 = h_22_quadrupole(dt, orbit)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     h11_1, h12_1, h22_1 = h_22_quadrupole(dt, orbit1, mass1)
        -     h11_2, h12_2, h22_2 = h_22_quadrupole(dt, orbit2, mass2)
        -     h11 = h11_1 + h11_2
        -     h12 = h12_1 + h12_2
        -     h22 = h22_1 + h22_2
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_two_body(dt::T, orbit1, mass1, orbit2, mass2) where {T}
        -     # compute (2,2) mode strain from orbits of BH 1 of mass1 and BH2 of mass 2
        - 
        -     @assert abs(mass1 + mass2 - 1.0)<1e-12 "Masses do not sum to unity"
        - 
        -     h11, h12, h22 = h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function compute_waveform(dt::T, soln, mass_ratio, model_params=nothing) where {T}
        -     @assert mass_ratio≤1 "mass_ratio must be <= 1"
        -     @assert mass_ratio≥0 "mass_ratio must be non-negative"
        - 
        -     orbit = soln2orbit(soln, model_params)
        -     if mass_ratio > 0
        -         m₂ = inv(T(1) + mass_ratio)
        -         m₁ = mass_ratio * m₂
        - 
        -         orbit₁, orbit₂ = one2two(orbit, m₁, m₂)
        -         waveform = h_22_strain_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     else
        -         waveform = h_22_strain_one_body(dt, orbit)
        -     end
        -     return waveform
        - end
        - ````
        - 
        - ````
        - compute_waveform (generic function with 2 methods)
        - ````
        - 
        - ## Simulating the True Model
        - 
        - `RelativisticOrbitModel` defines system of odes which describes motion of point like
        - particle in schwarzschild background, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function RelativisticOrbitModel(u, (p, M, e), t)
        -     χ, ϕ = u
        - 
        -     numer = (p - 2 - 2 * e * cos(χ)) * (1 + e * cos(χ))^2
        -     denom = sqrt((p - 2)^2 - 4 * e^2)
        - 
        -     χ̇ = numer * sqrt(p - 6 - 2 * e * cos(χ)) / (M * (p^2) * denom)
        -     ϕ̇ = numer / (M * (p^(3 / 2)) * denom)
        - 
        -     return [χ̇, ϕ̇]
        - end
        - 
        - mass_ratio = 0.0         # test particle
        - u0 = Float64[π, 0.0]     # initial conditions
        - datasize = 250
        - tspan = (0.0f0, 6.0f4)   # timespace for GW waveform
        - tsteps = range(tspan[1], tspan[2]; length=datasize)  # time at each timestep
        - dt_data = tsteps[2] - tsteps[1]
        - dt = 100.0
        - const ode_model_params = [100.0, 1.0, 0.5]; # p, M, e
        - ````
        - 
        - Let's simulate the true model and plot the results using `OrdinaryDiffEq.jl`
        - 
        - ````julia
        - prob = ODEProblem(RelativisticOrbitModel, u0, tspan, ode_model_params)
        - soln = Array(solve(prob, RK4(); saveat=tsteps, dt, adaptive=false))
        - waveform = first(compute_waveform(dt_data, soln, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l, s]], ["Waveform Data"])
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZwcdZ0//ndV9T3Tc9+T+yIHBMKVhDuXEYjy9UdUBEUBV7werorIesBXd/Wnq7DLggEB0UVFQXGBlSNcEgghF4QchJDJJJnMfR99d9f1/aNmaj5V1d2Zs6e65/V87GMfPd011RXKnq53vd+f95tTVZUAAAAAAABg+uGn+gAAAAAAAABgaiAgBAAAAAAAmKYQEAIAAAAAAExTCAgBAAAAAACmKQSEAAAAAAAA0xQCQgAAAAAAgGkKASEAAAAAAMA0hYAQAAAAAABgmkJACAAAAAAAME0hIAQAAAAAAJimEBACAAAAAABMUwgIAQAAAAAApikEhAAAAAAAANMUAkIAAAAAAIBpCgEhAAAAAADANIWAEAAAAAAAYJpCQAgAAAAAADBNISAEAAAAAACYphAQAgAAAAAATFMICAEAAAAAAKYpBIQAAAAAAADTFAJCAAAAAACAaQoBIQAAAAAAwDSFgBAAAAAAAGCaQkAIAAAAAAAwTSEgBAAAAAAAmKYQEAIAAAAAAExTCAgBAAAAAACmKQSEAAAAAAAA0xQCQgAAAAAAgGnKMdUHABOG47ipPgQAAAAAAJhgqqpO3s6RIQQAAAAAAJimkCHMNZN6/wAAAAAAADImAzWAyBACAAAAAABMUwgIAQAAAAAApikEhAAAAAAAANMUAkIAAAAAAIBpCgEhAAAAAADANIWAEAAAAAAAYJpCQAgAAAAAADBNISAEAAAAAACYpjCYPtfk5+frj0Oh0BQeCQAAAAAA2BynqupUHwNMDI7jTM/g5AIAAAAAZC/tCn9Sr+qRIcw1wWBwqg8BAAAAAACyAzKEuSMD9w8AAAAAACBjMn
        - ```
        - 
        - ## Defiing a Neural Network Model
        - 
        - Next, we define the neural network model that takes 1 input (time) and has two outputs.
        - We'll make a function `ODE_model` that takes the initial conditions, neural network
        - parameters and a time as inputs and returns the derivatives.
        - 
        - It is typically never recommended to use globals but incase you do use them, make sure
        - to mark them as `const`.
        - 
        - We will deviate from the standard Neural Network initialization and use
        - `WeightInitializers.jl`,
        - 
        - ````julia
        - const nn = Chain(Base.Fix1(broadcast, cos),
        -     Dense(1 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 2; init_weight=truncated_normal(; std=1e-4)))
        - ps, st = Lux.setup(MersenneTwister(), nn)
        - ````
        - 
        - ````
        - ((layer_1 = NamedTuple(), layer_2 = (weight = Float32[2.9214383f-5; -0.00020302867; 0.00011491977; -1.7587867f-6; -1.7669845f-5; -6.138092f-5; -6.209711f-5; 9.3658775f-5; -2.884396f-5; 9.149833f-5; -1.2792848f-6; -2.1458822f-5; 7.569815f-5; -0.00015785036; 7.6618206f-5; 2.4650366f-5; 7.3657204f-5; -0.00017013581; -0.00010957241; 6.6442815f-5; 4.2933225f-5; 1.8552679f-5; 0.00014361397; -7.1236655f-6; -2.8110293f-5; -4.3327836f-5; 3.5442034f-5; 2.172587f-5; 5.0080835f-6; -5.7553258f-5; -7.475116f-5; -5.145953f-5;;], bias = Float32[0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = Float32[6.4575393f-6 0.00016229719 -5.460161f-5 -7.712782f-6 -3.0626736f-5 -3.8477945f-5 -0.00014363593 -6.482581f-5 0.00013043694 -4.6379802f-5 6.886462f-5 -3.6651614f-5 2.5551324f-6 6.092358f-6 -8.890672f-5 0.00011952499 9.7550765f-5 -3.8006907f-5 3.0524694f-5 9.535136f-8 -7.685992f-5 0.00010479244 8.
        - ````
        - 
        - Similar to most DL frameworks, Lux defaults to using `Float32`, however, in this case we
        - need Float64
        - 
        - ````julia
        - const params = ComponentArray{Float64}(ps)
        - ````
        - 
        - ````
        - ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [2.921438317571301e-5; -0.0002030286705121398; 0.00011491977056721225; -1.7587866523172124e-6; -1.7669844964984804e-5; -6.138091703178361e-5; -6.209711136762053e-5; 9.365877485834062e-5; -2.8843960535596125e-5; 9.149833203991875e-5; -1.2792847883247305e-6; -2.1458821720443666e-5; 7.569815352326259e-5; -0.00015785035793669522; 7.66182056395337e-5; 2.465036595822312e-5; 7.365720375673845e-5; -0.00017013581236824393; -0.00010957240738207474; 6.644281529588625e-5; 4.2933224904118106e-5; 1.855267873906996e-5; 0.00014361397188622504; -7.123665454855654e-6; -2.8110292987548746e-5; -4.3327836465323344e-5; 3.544203354977071e-5; 2.1725869373767637e-5; 5.008083462598734e-6; -5.755325764766894e-5; -7.475115853594616e-5; -5.1459530368447304e-5;;], bias = [0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = [6.457539257098688e-
        - ````
        - 
        - Now we define a system of odes which describes motion of point like particle with
        - Newtonian physics, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function ODE_model(u, nn_params, t)
        -     χ, ϕ = u
        -     p, M, e = ode_model_params
        - 
        -     # In this example we know that `st` is am empty NamedTuple hence we can safely ignore
        -     # it, however, in general, we should use `st` to store the state of the neural network.
        -     y = 1 .+ first(nn([first(u)], nn_params, st))
        - 
        -     numer = (1 + e * cos(χ))^2
        -     denom = M * (p^(3 / 2))
        - 
        -     χ̇ = (numer / denom) * y[1]
        -     ϕ̇ = (numer / denom) * y[2]
        - 
        -     return [χ̇, ϕ̇]
        - end
        - ````
        - 
        - ````
        - ODE_model (generic function with 1 method)
        - ````
        - 
        - Let us now simulate the neural network model and plot the results. We'll use the untrained
        - neural network parameters to simulate the model.
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, params)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=params, saveat=tsteps, dt, adaptive=false))
        - waveform_nn = first(compute_waveform(dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)"]; position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeYwkWXU/+nNvLLlV1l7d1VXV+zo7MwPDsNlgwDwYEPLD9kMgIQFGSJb/sawBybKRZVmCPy3Llg0e/wFI3n4/HkYP8/CTwAaMmQWYYfapnp6u7urat9wzY7n3vj8iM/JGZlZ1bV0VmfX9qIWyIrMzY4iOyjhxzj2HKaUIAAAAAAAAjh5+2DsAAAAAAAAAhwMBIQAAAAAAwBGFgBAAAAAAAOCIQkAIAAAAAABwRCEgBAAAAAAAOKIQEAIAAAAAABxRCAgBAAAAAACOKASEAAAAAAAARxQCQgAAAAAAgCMKASEAAAAAAMARhYAQAAAAAADgiEJACAAAAAAAcEQhIAQAAAAAADiiEBACAAAAAAAcUQgIAQAAAAAAjigEhAAAAAAAAEcUAkIAAAAAAIAjCgEhAAAAAADAEYWAEAAAAAAA4IhCQAgAAAAAAHBEISAEAAAAAAA4ohAQAgAAAAAAHFEICAEAAAAAAI4oBIQAAAAAAABHFAJCAAAAAACAIwoBIQAAAAAAwBGFgBAAAAAAAOCIQkAIAAAAAABwRCEgBAAAAAAAOKIQEAIAAAAAABxR5mHvAOwbxthh7wIAAAAAAOwzpdSde3NkCAEAAAAAAI4oZAh7zR29fwAAAAAAAAfmAGoAkSEEAAAAAAA4ohAQAgAAAAAAHFEICAEAAAAAAI4oBIQAAAAAAABHFAJCAAAAAACAIwoBIQAAAAAAwBGFgBAAAAAAAOCIQkAIAAAAAABwRGEwfa/53d/93fDxv/7rvx7ingAAAAAAQMwxpdRh7wPsD8ZYyxYcXAAAAACA7hVc4d/Rq3pkCHvNv/zLvxz2LgAAAAAAQHdAhr
        - ```
        - 
        - ## Setting Up for Training the Neural Network
        - 
        - Next, we define the objective (loss) function to be minimized when training the neural
        - differential equations.
        - 
        - ````julia
        - function loss(θ)
        -     pred = Array(solve(prob_nn, RK4(); u0, p=θ, saveat=tsteps, dt, adaptive=false))
        -     pred_waveform = first(compute_waveform(dt_data, pred, mass_ratio, ode_model_params))
        -     loss = sum(abs2, waveform .- pred_waveform)
        -     return loss, pred_waveform
        - end
        - ````
        - 
        - ````
        - loss (generic function with 1 method)
        - ````
        - 
        - Warmup the loss function
        - 
        - ````julia
        - loss(params)
        - ````
        - 
        - ````
        - (0.18769813345158545, [-0.024282176228733895, -0.02349615115838929, -0.022710126088044735, -0.021381968215238897, -0.019483844392079855, -0.016975349417564553, -0.013803425637313205, -0.00989938792500878, -0.005181191879281737, 0.0004469098925853155, 0.0070851003030163095, 0.01481685851107373, 0.02366083885499728, 0.03344107697822245, 0.04350518783390119, 0.052057761810179494, 0.054750836423226285, 0.04239851184743481, 0.0014120128488419915, -0.06710327550722482, -0.11043769714955666, -0.07557607617646966, -0.006219833863806614, 0.03898289253846361, 0.05419093261790124, 0.05280371272448272, 0.04471674602083073, 0.03474296419039605, 0.024898237647992684, 0.01593528633040092, 0.008068496357823907, 0.0012986034577076447, -0.0044528211603447635, -0.009284673840609712, -0.013293315328694686, -0.016561373167237863, -0.019159154823533277, -0.021141539487905005, -0.02255010631462593, -0.023413982833510035, -0.023750780588730515, -0.02356691267349089, -0.022858824005236072, -0.021610643879491034, -0.01979622387106043
        - ````
        - 
        - Now let us define a callback function to store the loss over time
        - 
        - ````julia
        - const losses = Float64[]
        - 
        - function callback(θ, l, pred_waveform)
        -     push!(losses, l)
        -     println("Training || Iteration: $(length(losses)) || Loss: $(l)")
        -     return false
        - end
        - ````
        - 
        - ````
        - callback (generic function with 1 method)
        - ````
        - 
        - ## Training the Neural Network
        - 
        - Training uses the BFGS optimizers. This seems to give good results because the Newtonian
        - model seems to give a very good initial guess
        - 
        - ````julia
        - adtype = Optimization.AutoZygote()
        - optf = Optimization.OptimizationFunction((x, p) -> loss(x), adtype)
        - optprob = Optimization.OptimizationProblem(optf, params)
        - res = Optimization.solve(
        -     optprob, BFGS(; initial_stepnorm=0.01, linesearch=LineSearches.BackTracking());
        -     callback, maxiters=1000)
        - ````
        - 
        - ````
        - retcode: Success
        - u: ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [2.9214383175651763e-5; -0.0002030286705121952; 0.00011491977056692456; -1.758786652316601e-6; -1.7669844964970157e-5; -6.138091703168732e-5; -6.209711136756926e-5; 9.365877485821892e-5; -2.884396053556095e-5; 9.149833203980502e-5; -1.279284788322765e-6; -2.1458821720463642e-5; 7.569815352322325e-5; -0.00015785035793653218; 7.661820563937821e-5; 2.4650365958162767e-5; 7.365720375660243e-5; -0.0001701358123682935; -0.00010957240738205337; 6.644281529582406e-5; 4.293322490407215e-5; 1.855267873902754e-5; 0.00014361397188584061; -7.12366545486211e-6; -2.8110292987472303e-5; -4.332783646526415e-5; 3.544203354970715e-5; 2.172586937372914e-5; 5.008083462595243e-6; -5.755325764762441e-5; -7.475115853589629e-5; -5.14595303683834e-5;;], bias = [6.89928251716633e-17; 6.322983561117066e-17; 3.2390516292239706e-16; -6.945817206308469e-19; -1.6198432366165706e-17; -1.0794678850828276e-16; -5.788517242017475e-17; 1.3575396648575146e-16; -3.86616470201073
        - ````
        - 
        - ## Visualizing the Results
        - 
        - Let us now plot the loss over time
        - 
        - ````julia
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Iteration", ylabel="Loss")
        - 
        -     lines!(ax, losses; linewidth=2, alpha=0.75)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzde3TdZZ0v/mdn535tS3rZaUsTCrZQkMOvCyhecJQiWoqg6AziHJSrLs/MWSoiZ7GOzKizVplzxoXYww9B8MboKGsYQSniHBkFj4eb/rhI5SpJaJukbXrJrU3TJPv3xy67u216SbKT7768Xn89+7t3v99P1k7X6rvP83meWDKZDAAAABSfkqgLAAAAIBoCIQAAQJESCAEAAIqUQAgAAFCkBEIAAIAiJRACAAAUKYEQAACgSAmEAAAARUogBAAAKFICIQAAQJESCAEAAIqUQAgAAFCkBEIAAIAiJRACAAAUKYEQAACgSAmEAAAARUogBAAAKFICIQAAQJESCAEAAIqUQAgAAFCkBEIAAIAiJRACAAAUKYEQAACgSAmEAAAARUogBAAAKFICIQAAQJESCAEAAIqUQAgAAFCkBEIAAIAiJRACAAAUqdKoC+CwYrFY1CUAAAARSyaTU3dzM4QAAABFygxhrpvS/w8AAABy1jSsGTRDCAAAUKQEQgAAgCIlEAIAABQpgRAAAKBICYQAAABFSiAEAAAoUgIhAABAkRIIAQAAipRACAAAUKQEQgAAgCIlEAIAABQpgRAAAKBICYQAAABFSiAEAAAoUgIhAABAkRIIAQAAipRACAAAUKQEQgAAgCIlEAIAABQpgRAAAKBIlUZdAEdx+umnp8fPP/98hJUAAAAFJpZMJqOugbHFYrGDrviyAACgeKQSwZSmADOEue65556LugQAAKAwmSHMXdPw/wEAAEDOmoZEYFMZAACAIiUQAgAAFCmBEAAAoEgJhAAAAEXKLqMcXTIZOrcNtG7q2d47eNG7T4i6HAAAIDsEQo5i7/Domu
        - ```
        - 
        - Finally let us visualize the results
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, res.u)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=res.u, saveat=tsteps, dt, adaptive=false))
        - waveform_nn_trained = first(compute_waveform(
        -     dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l3 = lines!(ax, tsteps, waveform_nn_trained; linewidth=2, alpha=0.75)
        -     s3 = scatter!(
        -         ax, tsteps, waveform_nn_trained; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2], [l3, s3]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)", "Waveform Neural Net"];
        -         position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdaYxk2Vk3+Ocs98aW+1K51b50dXW7225327SNsWkML2BsWYzgCx4hgT+gEXzhg42EhFmEZD4iZIMwII2F5tOMxzDMgOd9xTvg5e22G9u47V5cS9eeVblUbrHd7ZxnPtxYTkRmVWdWZWXciPz/1LIib0ZGnPbtG3Ge+zznOYKZCQAAAAAAAA4f2esBAAAAAAAAQG8gIAQAAAAAADikEBACAAAAAAAcUggIAQAAAAAADikEhAAAAAAAAIcUAkIAAAAAAIBDCgEhAAAAAADAIYWAEAAAAAAA4JBCQAgAAAAAAHBIISAEAAAAAAA4pBAQAgAAAAAAHFIICAEAAAAAAA4pBIQAAAAAAACHFAJCAAAAAACAQwoBIQAAAAAAwCGFgBAAAAAAAOCQQkAIAAAAAABwSCEgBAAAAAAAOKQQEAIAAAAAABxSCAgBAAAAAAAOKQSEAAAAAAAAhxQCQgAAAAAAgEMKASEAAAAAAMAhhYAQAAAAAADgkEJACAAAAAAAcEghIAQAAAAAADikEBACAAAAAAAcUggIAQAAAAAADikEhAAAAAAAAIcUAkIAAAAAAIBDSvd6ALBvhBC9HgIAAAAAAOwzZn58L44MIQAAAAAAwCGFDOGgeaz3DwAAAAAA4MAcQA0gMoQAAAAAAACHFAJCAAAAAACAQwoBIQAAAAAAwCGFgBAAAAAAAOCQQkAIAAAAAABwSCEgBAAAAAAAOKQQEAIAAAAAABxSCAgBAAAAAAAOKQSEAAAAAAAAhxQCQgAAAAAAgEMKASEAAAAAAMAhhYAQAAAAAADgkEJACAAAAAAAcEghIAQAAAAAADikEBACAAAAAAAcUg
        - ```
        - 
        - ## Appendix
        - 
        - ````julia
        - using InteractiveUtils
        - InteractiveUtils.versioninfo()
        - if @isdefined(LuxCUDA) && CUDA.functional(); println(); CUDA.versioninfo(); end
        - if @isdefined(LuxAMDGPU) && LuxAMDGPU.functional(); println(); AMDGPU.versioninfo(); end
        - ````
        - 
        - ````
        - Julia Version 1.10.2
        - Commit bd47eca2c8a (2024-03-01 10:14 UTC)
        - Build Info:
        -   Official https://julialang.org/ release
        - Platform Info:
        -   OS: Linux (x86_64-linux-gnu)
        -   CPU: 48 × AMD EPYC 7402 24-Core Processor
        -   WORD_SIZE: 64
        -   LIBM: libopenlibm
        -   LLVM: libLLVM-15.0.7 (ORCJIT, znver2)
        - Threads: 48 default, 0 interactive, 24 GC (on 2 virtual cores)
        - Environment:
        -   LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64
        -   JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6
        -   JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-10/julialang/lux-dot-jl/docs/Project.toml
        -   JULIA_AMDGPU_LOGGING_ENABLED = true
        -   JULIA_DEBUG = Literate
        -   JULIA_CPU_THREADS = 2
        -   JULIA_NUM_THREADS = 48
        -   JULIA_LOAD_PATH = @:@v#.#:@stdlib
        -   JULIA_CUDA_HARD_MEMORY_LIMIT = 25%
        - 
        - CUDA runtime 12.3, artifact installation
        - CUDA driver 12.3
        - NVIDIA driver 545.23.8
        - 
        - CUDA libraries: 
        - - CUBLAS: 12.3.4
        - - CURAND: 10.3.4
        - - CUFFT: 11.0.12
        - - CUSOLVER: 11.5.4
        - - CUSPARSE: 12.2.0
        - - CUPTI: 21.0.0
        - - NVML: 12.0.0+545.23.8
        - 
        - Julia packages: 
        - - CUDA: 5.2.0
        - - CUDA_Driver_jll: 0.7.0+1
        - - CUDA_Runtime_jll: 0.11.1+0
        - 
        - Toolchain:
        - - Julia: 1.10.2
        - - LLVM: 15.0.7
        - 
        - Environment:
        - - JULIA_CUDA_HARD_MEMORY_LIMIT: 25%
        - 
        - 1 device:
        -   0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 3.850 GiB / 4.750 GiB available)
        - ┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.
        - └ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19
        - 
        - ````
        - 
        - ---
        - 
        - *This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*
        - 
