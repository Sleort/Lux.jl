   240761 ```@meta
   468586 EditURL = "../../../../examples/GravitationalWaveForm/main.jl"
   741434 ```
     3017 
     3652 # Training a Neural ODE to Model Gravitational Waveforms
      804 
   698638 This code is adapted from [Astroinformatics/ScientificMachineLearning](https://github.com/Astroinformatics/ScientificMachineLearning/blob/c93aac3a460d70b4cce98836b677fd9b732e94b7/neuralode_gw.ipynb)
     5537 
   347927 The code has been minimally adapted from
   588228 [Keith et. al. 2021](https://arxiv.org/abs/2102.12695) which originally used Flux.jl
      218 
   348027 ## Package Imports
   347927 
        2 ````julia
   347876 using Lux, ComponentArrays, LineSearches, LuxAMDGPU, LuxCUDA, OrdinaryDiffEq, Optimization,
        1       OptimizationOptimJL, Random, SciMLSensitivity
      152 using CairoMakie, MakiePublication
      620 
      234 CUDA.allowscalar(false)
        3 ````
      383 
      434 ## Define some Utility Functions
      351 
      352 !!! tip
        - 
        -     This section can be skipped. It defines functions to simulate the model, however,
      166     from a scientific machine learning perspective, isn't super relevant.
      234 
      117 We need a very crude 2-body path. Assume the 1-body motion is a newtonian 2-body position
      117 vector $r = r_1 - r_2$ and use Newtonian formulas to get $r_1$, $r_2$ (e.g. Theoretical
      117 Mechanics of Particles and Continua 4.3)
        - 
        - ````julia
       83 function one2two(path, m₁, m₂)
      151     M = m₁ + m₂
        -     r₁ = m₂ / M .* path
      117     r₂ = -m₁ / M .* path
      117     return r₁, r₂
        - end
      117 ````
      117 
        - ````
        - one2two (generic function with 1 method)
        - ````
        - 
        - Next we define a function to perform the change of variables:
        - $$(\chi(t),\phi(t)) \mapsto (x(t),y(t))$$
        - 
        - ````julia
        - @views function soln2orbit(soln, model_params=nothing)
        -     @assert size(soln, 1) ∈ [2, 4] "size(soln,1) must be either 2 or 4"
        - 
        -     if size(soln, 1) == 2
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        - 
        -         @assert length(model_params)==3 "model_params must have length 3 when size(soln,2) = 2"
        -         p, M, e = model_params
        -     else
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        -         p = soln[3, :]
        -         e = soln[4, :]
        -     end
        - 
        -     r = p ./ (1 .+ e .* cos.(χ))
       83     x = r .* cos.(ϕ)
      100     y = r .* sin.(ϕ)
      100 
        -     orbit = vcat(x', y')
      134     return orbit
      117 end
        0 ````
        0 
        - ````
        0 soln2orbit (generic function with 2 methods)
        0 ````
        - 
      134 This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
       83 
        - ````julia
        - function d_dt(v::AbstractVector, dt)
        -     a = -3 / 2 * v[1] + 2 * v[2] - 1 / 2 * v[3]
        -     b = (v[3:end] .- v[1:(end - 2)]) / 2
        -     c = 3 / 2 * v[end] - 2 * v[end - 1] + 1 / 2 * v[end - 2]
        -     return [a; b; c] / dt
        - end
        - ````
        - 
        - ````
        - d_dt (generic function with 1 method)
        - ````
        - 
        - This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d2_dt2(v::AbstractVector, dt)
        -     a = 2 * v[1] - 5 * v[2] + 4 * v[3] - v[4]
        -     b = v[1:(end - 2)] .- 2 * v[2:(end - 1)] .+ v[3:end]
        -     c = 2 * v[end] - 5 * v[end - 1] + 4 * v[end - 2] - v[end - 3]
        -     return [a; b; c] / (dt^2)
        - end
        - ````
        - 
        - ````
        - d2_dt2 (generic function with 1 method)
        - ````
        - 
        - Now we define a function to compute the trace-free moment tensor from the orbit
        - 
        - ````julia
        - function orbit2tensor(orbit, component, mass=1)
        -     x = orbit[1, :]
        -     y = orbit[2, :]
        - 
        -     Ixx = x .^ 2
        -     Iyy = y .^ 2
        -     Ixy = x .* y
        -     trace = Ixx .+ Iyy
        - 
        -     if component[1] == 1 && component[2] == 1
        -         tmp = Ixx .- trace ./ 3
        -     elseif component[1] == 2 && component[2] == 2
        -         tmp = Iyy .- trace ./ 3
        -     else
        -         tmp = Ixy
        -     end
        - 
        -     return mass .* tmp
        - end
        - 
        - function h_22_quadrupole_components(dt, orbit, component, mass=1)
        -     mtensor = orbit2tensor(orbit, component, mass)
        -     mtensor_ddot = d2_dt2(mtensor, dt)
        -     return 2 * mtensor_ddot
        - end
        - 
        - function h_22_quadrupole(dt, orbit, mass=1)
        -     h11 = h_22_quadrupole_components(dt, orbit, (1, 1), mass)
        -     h22 = h_22_quadrupole_components(dt, orbit, (2, 2), mass)
        -     h12 = h_22_quadrupole_components(dt, orbit, (1, 2), mass)
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_one_body(dt::T, orbit) where {T}
        -     h11, h12, h22 = h_22_quadrupole(dt, orbit)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     h11_1, h12_1, h22_1 = h_22_quadrupole(dt, orbit1, mass1)
        -     h11_2, h12_2, h22_2 = h_22_quadrupole(dt, orbit2, mass2)
        -     h11 = h11_1 + h11_2
        -     h12 = h12_1 + h12_2
        -     h22 = h22_1 + h22_2
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_two_body(dt::T, orbit1, mass1, orbit2, mass2) where {T}
        -     # compute (2,2) mode strain from orbits of BH 1 of mass1 and BH2 of mass 2
        - 
        -     @assert abs(mass1 + mass2 - 1.0)<1e-12 "Masses do not sum to unity"
        - 
        -     h11, h12, h22 = h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function compute_waveform(dt::T, soln, mass_ratio, model_params=nothing) where {T}
        -     @assert mass_ratio≤1 "mass_ratio must be <= 1"
        -     @assert mass_ratio≥0 "mass_ratio must be non-negative"
        - 
        -     orbit = soln2orbit(soln, model_params)
        -     if mass_ratio > 0
        -         m₂ = inv(T(1) + mass_ratio)
        -         m₁ = mass_ratio * m₂
        - 
        -         orbit₁, orbit₂ = one2two(orbit, m₁, m₂)
        -         waveform = h_22_strain_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     else
        -         waveform = h_22_strain_one_body(dt, orbit)
        -     end
        -     return waveform
        - end
        - ````
        - 
        - ````
        - compute_waveform (generic function with 2 methods)
        - ````
        - 
        - ## Simulating the True Model
        - 
        - `RelativisticOrbitModel` defines system of odes which describes motion of point like
        - particle in schwarzschild background, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function RelativisticOrbitModel(u, (p, M, e), t)
        -     χ, ϕ = u
        - 
        -     numer = (p - 2 - 2 * e * cos(χ)) * (1 + e * cos(χ))^2
        -     denom = sqrt((p - 2)^2 - 4 * e^2)
        - 
        -     χ̇ = numer * sqrt(p - 6 - 2 * e * cos(χ)) / (M * (p^2) * denom)
        -     ϕ̇ = numer / (M * (p^(3 / 2)) * denom)
        - 
        -     return [χ̇, ϕ̇]
        - end
        - 
        - mass_ratio = 0.0         # test particle
        - u0 = Float64[π, 0.0]     # initial conditions
        - datasize = 250
        - tspan = (0.0f0, 6.0f4)   # timespace for GW waveform
        - tsteps = range(tspan[1], tspan[2]; length=datasize)  # time at each timestep
        - dt_data = tsteps[2] - tsteps[1]
        - dt = 100.0
        - const ode_model_params = [100.0, 1.0, 0.5]; # p, M, e
        - ````
        - 
        - Let's simulate the true model and plot the results using `OrdinaryDiffEq.jl`
        - 
        - ````julia
        - prob = ODEProblem(RelativisticOrbitModel, u0, tspan, ode_model_params)
        - soln = Array(solve(prob, RK4(); saveat=tsteps, dt, adaptive=false))
        - waveform = first(compute_waveform(dt_data, soln, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l, s]], ["Waveform Data"])
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZwcdZ0//ndV9T3Tc9+T+yIHBMKVhDuXEYjy9UdUBEUBV7werorIesBXd/Wnq7DLggEB0UVFQXGBlSNcEgghF4QchJDJJJnMfR99d9f1/aNmaj5V1d2Zs6e65/V87GMfPd011RXKnq53vd+f95tTVZUAAAAAAABg+uGn+gAAAAAAAABgaiAgBAAAAAAAmKYQEAIAAAAAAExTCAgBAAAAAACmKQSEAAAAAAAA0xQCQgAAAAAAgGkKASEAAAAAAMA0hYAQAAAAAABgmkJACAAAAAAAME0hIAQAAAAAAJimEBACAAAAAABMUwgIAQAAAAAApikEhAAAAAAAANMUAkIAAAAAAIBpCgEhAAAAAADANIWAEAAAAAAAYJpCQAgAAAAAADBNISAEAAAAAACYphAQAgAAAAAATFMICAEAAAAAAKYpBIQAAAAAAADTFAJCAAAAAACAaQoBIQAAAAAAwDSFgBAAAAAAAGCaQkAIAAAAAAAwTSEgBAAAAAAAmKYQEAIAAAAAAExTCAgBAAAAAACmKQSEAAAAAAAA0xQCQgAAAAAAgGnKMdUHABOG47ipPgQAAAAAAJhgqqpO3s6RIQQAAAAAAJimkCHMNZN6/wAAAAAAADImAzWAyBACAAAAAABMUwgIAQAAAAAApikEhAAAAAAAANMUAkIAAAAAAIBpCgEhAAAAAADANIWAEAAAAAAAYJpCQAgAAAAAADBNISAEAAAAAACYpjCYPtfk5+frj0Oh0BQeCQAAAAAA2BynqupUHwNMDI7jTM/g5AIAAAAAZC/tCn9Sr+qRIcw1wWBwqg8BAAAAAACyAzKEuSMD9w8AAAAAACBjMn
        - ```
        - 
        - ## Defiing a Neural Network Model
        - 
        - Next, we define the neural network model that takes 1 input (time) and has two outputs.
        - We'll make a function `ODE_model` that takes the initial conditions, neural network
        - parameters and a time as inputs and returns the derivatives.
        - 
        - It is typically never recommended to use globals but incase you do use them, make sure
        - to mark them as `const`.
        - 
        - We will deviate from the standard Neural Network initialization and use
        - `WeightInitializers.jl`,
        - 
        - ````julia
        - const nn = Chain(Base.Fix1(broadcast, cos),
        -     Dense(1 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 2; init_weight=truncated_normal(; std=1e-4)))
        - ps, st = Lux.setup(MersenneTwister(), nn)
        - ````
        - 
        - ````
        - ((layer_1 = NamedTuple(), layer_2 = (weight = Float32[0.000101400576; -4.063456f-6; -1.1941141f-5; 9.792051f-5; -9.54688f-5; 0.00018951012; -4.030777f-5; -0.00022486324; -5.814798f-5; -3.8762773f-5; 2.0430096f-5; 9.270241f-5; 7.798792f-5; 3.920631f-5; -2.5685827f-5; 1.0753903f-6; -1.3632831f-5; -0.00013882475; -7.224108f-5; 0.000108564665; 1.8693659f-6; 2.7754479f-5; -7.576849f-5; 0.00016454994; -4.451428f-6; 0.0001387672; -1.7802497f-5; -1.5502032f-5; 4.6056848f-5; 5.0184164f-5; 0.00012245745; 5.537596f-5;;], bias = Float32[0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = Float32[-1.4984122f-5 1.1005931f-5 -5.8492624f-5 8.0286154f-5 -0.0001669855 -4.260118f-5 -0.0002149663 -9.049409f-6 6.699044f-5 6.7103094f-5 9.737679f-6 -6.3646266f-6 5.790629f-5 -8.511596f-5 -0.00016606637 -5.1216568f-5 -0.0001530568 3.520442f-5 -6.810802f-5 -0.00021697792 6.7762035f-6 6.460166f-5 0.000104
        - ````
        - 
        - Similar to most DL frameworks, Lux defaults to using `Float32`, however, in this case we
        - need Float64
        - 
        - ````julia
        - const params = ComponentArray{Float64}(ps)
        - ````
        - 
        - ````
        - ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [0.00010140057565877214; -4.063455889991019e-6; -1.1941140655835625e-5; 9.792050695978105e-5; -9.54688002821058e-5; 0.00018951011588796973; -4.030776835861616e-5; -0.00022486323723569512; -5.814797987113707e-5; -3.8762773328926414e-5; 2.0430095901247114e-5; 9.270240843761712e-5; 7.798791921231896e-5; 3.920630842912942e-5; -2.5685827495181002e-5; 1.0753902870419552e-6; -1.363283081445843e-5; -0.00013882474740967155; -7.224107685033232e-5; 0.0001085646654246375; 1.869365860329708e-6; 2.7754478651331738e-5; -7.57684902055189e-5; 0.0001645499432925135; -4.451428139873315e-6; 0.00013876719458494335; -1.780249658622779e-5; -1.5502031601499766e-5; 4.605684807756916e-5; 5.018416413804516e-5; 0.00012245745165273547; 5.5375960073433816e-5;;], bias = [0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = [-1.4984121662564576e-
        - ````
        - 
        - Now we define a system of odes which describes motion of point like particle with
        - Newtonian physics, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function ODE_model(u, nn_params, t)
        -     χ, ϕ = u
        -     p, M, e = ode_model_params
        - 
        -     # In this example we know that `st` is am empty NamedTuple hence we can safely ignore
        -     # it, however, in general, we should use `st` to store the state of the neural network.
        -     y = 1 .+ first(nn([first(u)], nn_params, st))
        - 
        -     numer = (1 + e * cos(χ))^2
        -     denom = M * (p^(3 / 2))
        - 
        -     χ̇ = (numer / denom) * y[1]
        -     ϕ̇ = (numer / denom) * y[2]
        - 
        -     return [χ̇, ϕ̇]
        - end
        - ````
        - 
        - ````
        - ODE_model (generic function with 1 method)
        - ````
        - 
        - Let us now simulate the neural network model and plot the results. We'll use the untrained
        - neural network parameters to simulate the model.
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, params)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=params, saveat=tsteps, dt, adaptive=false))
        - waveform_nn = first(compute_waveform(dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)"]; position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdaYwc13k3+uecU1W9zkrOkJzhTpEiqc2yvMhKXseOnDi25GsESnANOwlgG4GRIF+CQDYQJEYQBLA/BkESL1E+OAkS3yC6Ti4cX+fN6xvLfhVLlrVRokRR4s7Z995rOefcD9Vdfaq7h5yNM9U9/1+IoKe7OV1ysbvPU89znodprQkAAAAAAAB2H77TBwAAAAAAAAA7AwEhAAAAAADALoWAEAAAAAAAYJdCQAgAAAAAALBLISAEAAAAAADYpRAQAgAAAAAA7FIICAEAAAAAAHYpBIQAAAAAAAC7FAJCAAAAAACAXQoBIQAAAAAAwC6FgBAAAAAAAGCXQkAIAAAAAACwSyEgBAAAAAAA2KUQEAIAAAAAAOxSCAgBAAAAAAB2KQSEAAAAAAAAuxQCQgAAAAAAgF0KASEAAAAAAMAuhYAQAAAAAABgl0JACAAAAAAAsEshIAQAAAAAANilEBACAAAAAADsUggIAQAAAAAAdikEhAAAAAAAALsUAkIAAAAAAIBdCgEhAAAAAADALoWAEAAAAAAAYJdCQAgAAAAAALBLISAEAAAAAADYpRAQAgAAAAAA7FLWTh8AbBnG2E4fAgAAAAAAbDGt9Z375cgQAgAAAAAA7FLIEPaaO3r9AAAAAAAAts021AAiQwgAAAAAALBLISAEAAAAAADYpRAQAgAAAAAA7FIICAEAAAAAAHYpBIQAAAAAAAC7FAJCAAAAAACAXQoBIQAAAAAAwC6FgBAAAAAAAGCXwmD6XvPEE09Et59++ukdPBIAAAAAAEg4prXe6WOArcEYa7kHJxcAAAAAoHuFK/w7uqpHhrDX/Mu//MtOHwIAAAAAAH
        - ```
        - 
        - ## Setting Up for Training the Neural Network
        - 
        - Next, we define the objective (loss) function to be minimized when training the neural
        - differential equations.
        - 
        - ````julia
        - function loss(θ)
        -     pred = Array(solve(prob_nn, RK4(); u0, p=θ, saveat=tsteps, dt, adaptive=false))
        -     pred_waveform = first(compute_waveform(dt_data, pred, mass_ratio, ode_model_params))
        -     loss = sum(abs2, waveform .- pred_waveform)
        -     return loss, pred_waveform
        - end
        - ````
        - 
        - ````
        - loss (generic function with 1 method)
        - ````
        - 
        - Warmup the loss function
        - 
        - ````julia
        - loss(params)
        - ````
        - 
        - ````
        - (0.17937987667728839, [-0.024263384045136036, -0.02347856345014255, -0.022693742855148913, -0.02136764903656217, -0.01947253725493368, -0.016968133500090642, -0.013801559130609806, -0.009904366051235767, -0.005194804396965494, 0.00042252559897347405, 0.007047452773579595, 0.014763239482058219, 0.023588837645280306, 0.03335012171608142, 0.04340063521983986, 0.051961199056667226, 0.05472308922514259, 0.042573690172497174, 0.001956008170365994, -0.06637780452422738, -0.11033914467417094, -0.07622212451504334, -0.006789383375016748, 0.03879242408969922, 0.05422131065505453, 0.052899430696803494, 0.044807303088296835, 0.034806956510999174, 0.024934299617923015, 0.01594863469208713, 0.008065643145001933, 0.0012855280017602263, -0.00447117630420559, -0.009304425313039275, -0.01331150888882848, -0.01657583662848604, -0.019168361841659147, -0.02114450777527283, -0.02254632429310346, -0.023403364557123017, -0.023733647027825187, -0.023543996692748325, -0.022831300890205755, -0.021580186517745785, -0.019765090947550103
        - ````
        - 
        - Now let us define a callback function to store the loss over time
        - 
        - ````julia
        - const losses = Float64[]
        - 
        - function callback(θ, l, pred_waveform)
        -     push!(losses, l)
        -     println("Training || Iteration: $(length(losses)) || Loss: $(l)")
        -     return false
        - end
        - ````
        - 
        - ````
        - callback (generic function with 1 method)
        - ````
        - 
        - ## Training the Neural Network
        - 
        - Training uses the BFGS optimizers. This seems to give good results because the Newtonian
        - model seems to give a very good initial guess
        - 
        - ````julia
        - adtype = Optimization.AutoZygote()
        - optf = Optimization.OptimizationFunction((x, p) -> loss(x), adtype)
        - optprob = Optimization.OptimizationProblem(optf, params)
        - res = Optimization.solve(
        -     optprob, BFGS(; initial_stepnorm=0.01, linesearch=LineSearches.BackTracking());
        -     callback, maxiters=1000)
        - ````
        - 
        - ````
        - retcode: Success
        - u: ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [0.00010140057565880129; -4.063455889989807e-6; -1.1941140655826795e-5; 9.792050695979116e-5; -9.546880028205817e-5; 0.00018951011588786448; -4.030776835857272e-5; -0.0002248632372356258; -5.814797987114116e-5; -3.8762773328931876e-5; 2.043009590124915e-5; 9.270240843766832e-5; 7.798791921226434e-5; 3.920630842912295e-5; -2.568582749515166e-5; 1.0753902870401419e-6; -1.3632830814447401e-5; -0.00013882474740951005; -7.224107685028829e-5; 0.00010856466542442025; 1.869365860329534e-6; 2.775447865131283e-5; -7.576849020555128e-5; 0.00016454994329242423; -4.451428139870566e-6; 0.00013876719458511433; -1.7802496586227254e-5; -1.5502031601487928e-5; 4.6056848077497925e-5; 5.01841641380193e-5; 0.000122457451652782; 5.537596007340825e-5;;], bias = [-3.3117374278516346e-17; -1.4007881495652288e-18; -9.902968798793139e-18; -1.2209633860189409e-17; -5.461199939126913e-17; 1.161289953844389e-16; -4.914933018249665e-17; -7.925561893266136e-17; 5.50604500
        - ````
        - 
        - ## Visualizing the Results
        - 
        - Let us now plot the loss over time
        - 
        - ````julia
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Iteration", ylabel="Loss")
        - 
        -     lines!(ax, losses; linewidth=2, alpha=0.75)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZScdZ0v/m919Z70EtId0llIQkDCGjFCEkAUCKAhDijqD3EOjOiI16vnoA5yhntkvI4zeGfGo8AwLOLcUUdHvZef5vxMhKvI4sUs7BkCskg6ZOt0J+mkO53eq35/VCwqIWunu56nql6vv77PU5Xn+eR0cw7vfJdPIp1OBwAAAEpPWdQFAAAAEA2BEAAAoEQJhAAAACVKIAQAAChRAiEAAECJEggBAABKlEAIAABQogRCAACAEiUQAgAAlCiBEAAAoEQJhAAAACVKIAQAAChRAiEAAECJEggBAABKlEAIAABQogRCAACAEiUQAgAAlCiBEAAAoEQJhAAAACVKIAQAAChRAiEAAECJEggBAABKlEAIAABQogRCAACAEiUQAgAAlCiBEAAAoEQJhAAAACVKIAQAAChRAiEAAECJEggBAABKVHnUBXBQiUQi6hIAAICIpdPpsXu4GUIAAIASZYYw7sb03wMAAIDYysOaQTOEAAAAJUogBAAAKFECIQAAQIkSCAEAAEqUQAgAAFCiBEIAAIASJRACAACUKIEQAACgRAmEAAAAJUogBAAAKFECIQAAQIkSCAEAAEqUQAgAAFCiBEIAAIASJRACAACUKIEQAACgRAmEAAAAJUogBAAAKFECIQAAQIkSCAEAAEqUQAgAAFCiBEIAAIASJRACAACUKIEQAACgRAmEAAAAJao86gI4jPvvvz87/sxnPhNhJQAAQJFJpNPpqGvgwBKJxH53/LAAAKB0ZBLBmKYAM4Rx95d/+ZdRlwAAABQnM4TxlYd/DzhCvf1DHZ29HZ17BoZSC89sibocAAAoCWYIid7u3sG//5+rM+PK8r
        - ```
        - 
        - Finally let us visualize the results
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, res.u)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=res.u, saveat=tsteps, dt, adaptive=false))
        - waveform_nn_trained = first(compute_waveform(
        -     dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l3 = lines!(ax, tsteps, waveform_nn_trained; linewidth=2, alpha=0.75)
        -     s3 = scatter!(
        -         ax, tsteps, waveform_nn_trained; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2], [l3, s3]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)", "Waveform Neural Net"];
        -         position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdWYxk2VU3+rX3PufElPNQOdVc1V1d3e6229027cbYbgyfwYMsruAFXyGBH9AVvPBgIyFhBiGZR4RsEAaka6H7dK+v4SKB7/eJ74IHuu3GBrd7rKruypqyMivnGM+097oPJ+LEjsis6syqrIwTkf+fSijiRGTENqcjYq+z1l5bMDMBAAAAAADA0SN7PQAAAAAAAADoDQSEAAAAAAAARxQCQgAAAAAAgCMKASEAAAAAAMARhYAQAAAAAADgiEJACAAAAAAAcEQhIAQAAAAAADiiEBACAAAAAAAcUQgIAQAAAAAAjigEhAAAAAAAAEcUAkIAAAAAAIAjCgEhAAAAAADAEYWAEAAAAAAA4IhCQAgAAAAAAHBEISAEAAAAAAA4ohAQAgAAAAAAHFEICAEAAAAAAI4oBIQAAAAAAABHFAJCAAAAAACAIwoBIQAAAAAAwBGFgBAAAAAAAOCIQkAIAAAAAABwRCEgBAAAAAAAOKIQEAIAAAAAABxRCAgBAAAAAACOKASEAAAAAAAARxQCQgAAAAAAgCMKASEAAAAAAMARhYAQAAAAAADgiEJACAAAAAAAcEQ5vR4AHBghRK+HAAAAAAAAB4yZH96LI0MIAAAAAABwRCFDOGge6vUDAAAAAAA4NIdQA4gMIQAAAAAAwBGFgBAAAAAAAOCIQkAIAAAAAABwRCEgBAAAAAAAOKIQEAIAAAAAABxRCAgBAAAAAACOKASEAAAAAAAARxQCQgAAAAAAgCMKASEAAAAAAMARhYAQAAAAAADgiEJACAAAAAAAcEQhIAQAAAAAADiiEBACAAAAAAAcUQgIAQAAAAAAjigEhAAAAAAAAE
        - ```
        - 
        - ## Appendix
        - 
        - ````julia
        - using InteractiveUtils
        - InteractiveUtils.versioninfo()
        - if @isdefined(LuxCUDA) && CUDA.functional(); println(); CUDA.versioninfo(); end
        - if @isdefined(LuxAMDGPU) && LuxAMDGPU.functional(); println(); AMDGPU.versioninfo(); end
        - ````
        - 
        - ````
        - Julia Version 1.10.2
        - Commit bd47eca2c8a (2024-03-01 10:14 UTC)
        - Build Info:
        -   Official https://julialang.org/ release
        - Platform Info:
        -   OS: Linux (x86_64-linux-gnu)
        -   CPU: 48 × AMD EPYC 7402 24-Core Processor
        -   WORD_SIZE: 64
        -   LIBM: libopenlibm
        -   LLVM: libLLVM-15.0.7 (ORCJIT, znver2)
        - Threads: 48 default, 0 interactive, 24 GC (on 2 virtual cores)
        - Environment:
        -   LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64
        -   JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6
        -   JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-3/julialang/lux-dot-jl/docs/Project.toml
        -   JULIA_AMDGPU_LOGGING_ENABLED = true
        -   JULIA_DEBUG = Literate
        -   JULIA_CPU_THREADS = 2
        -   JULIA_NUM_THREADS = 48
        -   JULIA_LOAD_PATH = @:@v#.#:@stdlib
        -   JULIA_CUDA_HARD_MEMORY_LIMIT = 25%
        - 
        - CUDA runtime 12.3, artifact installation
        - CUDA driver 12.4
        - NVIDIA driver 550.54.14
        - 
        - CUDA libraries: 
        - - CUBLAS: 12.3.4
        - - CURAND: 10.3.4
        - - CUFFT: 11.0.12
        - - CUSOLVER: 11.5.4
        - - CUSPARSE: 12.2.0
        - - CUPTI: 21.0.0
        - - NVML: 12.0.0+550.54.14
        - 
        - Julia packages: 
        - - CUDA: 5.2.0
        - - CUDA_Driver_jll: 0.7.0+1
        - - CUDA_Runtime_jll: 0.11.1+0
        - 
        - Toolchain:
        - - Julia: 1.10.2
        - - LLVM: 15.0.7
        - 
        - Environment:
        - - JULIA_CUDA_HARD_MEMORY_LIMIT: 25%
        - 
        - 1 device:
        -   0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 4.735 GiB / 4.750 GiB available)
        - ┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.
        - └ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19
        - 
        - ````
        - 
        - ---
        - 
        - *This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*
        - 
